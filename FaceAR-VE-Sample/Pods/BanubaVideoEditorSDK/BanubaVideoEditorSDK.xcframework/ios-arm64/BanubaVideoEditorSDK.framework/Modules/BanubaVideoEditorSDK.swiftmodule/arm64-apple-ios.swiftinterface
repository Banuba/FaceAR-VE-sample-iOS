// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=unchecked -Onone -module-name BanubaVideoEditorSDK
import AVFoundation
import AVKit
import BanubaLicenseServicingSDK
import BanubaMusicEditorSDK
import BanubaOverlayEditorSDK
import BanubaSDKServicing
import BanubaSdkSimple
import BanubaUtilities
@_exported import BanubaVideoEditorSDK
import BanubaVideoEditorTrimSDK
import CoreGraphics
import CoreMedia
import Foundation
import ImageIO
import MobileCoreServices
import Photos
import Swift
import UIKit
import VEEffectsSDK
import VEExportSDK
import VEPlaybackSDK
import VideoEditor
import _Concurrency
public class EffectItem {
  public var effect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`
  public var icon: BanubaUtilities.ImageConfigurationProtocol?
  public var text: BanubaUtilities.TextConfiguration
  public var isSelected: Swift.Bool
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var selectedColor: UIKit.UIColor
  public init(choosedEffect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, icon: BanubaUtilities.ImageConfigurationProtocol?, text: BanubaUtilities.TextConfiguration, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, selectedColor: UIKit.UIColor)
  @objc deinit
}
public class VideoOverlayObjectWithImage : BanubaOverlayEditorSDK.OverlayItem {
  final public let id: Swift.String
  public var image: UIKit.UIImage
  public var imageData: Foundation.Data
  public var startTime: CoreMedia.CMTime
  public var endTime: CoreMedia.CMTime
  public var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle {
    get
  }
  public var isEditable: Swift.Bool {
    get
  }
  public var frame: CoreGraphics.CGRect
  public var transform: CoreGraphics.CGAffineTransform
  public var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`?
  public var position: BanubaOverlayEditorSDK.OverlayItemLinePosition?
  public var order: Swift.Int
  public init(id: Swift.String, image: UIKit.UIImage, imageData: Foundation.Data, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, frame: CoreGraphics.CGRect = .zero, transform: CoreGraphics.CGAffineTransform = .identity, order: Swift.Int = .zero)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension BanubaVideoEditorSDK.VideoOverlayObjectWithImage : Swift.Equatable {
  public static func == (lhs: BanubaVideoEditorSDK.VideoOverlayObjectWithImage, rhs: BanubaVideoEditorSDK.VideoOverlayObjectWithImage) -> Swift.Bool
}
public class VideoOverlayObjectWithText : BanubaOverlayEditorSDK.OverlayItem {
  public var id: Swift.String
  public var image: UIKit.UIImage
  public var startTime: CoreMedia.CMTime
  public var endTime: CoreMedia.CMTime
  public var presentationStyle: BanubaOverlayEditorSDK.OverlayItemPresentationStyle {
    get
  }
  public var isEditable: Swift.Bool {
    get
  }
  public var wasApplied: Swift.Bool
  public var text: Swift.String?
  public var font: BanubaVideoEditorSDK.VideoTextFont?
  public var backgroundColor: UIKit.UIColor?
  public var foregroundColor: UIKit.UIColor?
  public var alignment: UIKit.NSTextAlignment?
  public var frame: CoreGraphics.CGRect
  public var transform: CoreGraphics.CGAffineTransform
  public var type: BanubaOverlayEditorSDK.OverlayAddButtonConfig.`Type`?
  public var position: BanubaOverlayEditorSDK.OverlayItemLinePosition?
  public var order: Swift.Int
  convenience public init()
  public init(image: UIKit.UIImage)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension BanubaVideoEditorSDK.VideoOverlayObjectWithText : Swift.Equatable {
  public static func == (lhs: BanubaVideoEditorSDK.VideoOverlayObjectWithText, rhs: BanubaVideoEditorSDK.VideoOverlayObjectWithText) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FullscreenActivityView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var additionalButton: UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) public var configuration: BanubaVideoEditorSDK.FullScreenActivityConfiguration? {
    get
    set
  }
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func applyVisibility(_ visible: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func loadFromNib() -> BanubaVideoEditorSDK.FullscreenActivityView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class ApplicationInformation {
  required public init(bundle: Foundation.Bundle)
  final public var version: Swift.String {
    get
  }
  final public var build: Swift.String {
    get
  }
  final public var fullVersion: Swift.String {
    get
  }
  @objc deinit
}
public enum AudioWriterStatus {
  case prepare
  case ready
  case capturing
  case completed
  case failed
  public static func == (a: BanubaVideoEditorSDK.AudioWriterStatus, b: BanubaVideoEditorSDK.AudioWriterStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AudioWriterDelegate : BanubaMusicEditorSDK.AudioWriterAdoptableDelegate {
  func audioWriter(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable, didFailWithError error: Swift.Error)
  func audioWriter(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable, didFinishRecording successful: Swift.Bool)
  func audioWriterDidStartRecording(_ audioWriter: BanubaMusicEditorSDK.AudioWriterAdoptable)
}
@objc public class VideoEditorLaunchConfig : ObjectiveC.NSObject {
  public var entryPoint: BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint
  public var hostController: UIKit.UIViewController
  public var videoItems: [Foundation.URL]?
  public var draftedLaunchConfig: BanubaVideoEditorSDK.VideoEditorLaunchConfig.DraftedLaunchConfig?
  public var pipVideoItem: Foundation.URL?
  public var musicTrack: BanubaUtilities.MediaTrack?
  public var animated: Swift.Bool
  public struct DraftedLaunchConfig {
    public var draftedVideoSequence: VideoEditor.VideoSequence
    public var draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig
    public init(draftedVideoSequence: VideoEditor.VideoSequence, draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig)
  }
  public init(entryPoint: BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint, hostController: UIKit.UIViewController, videoItems: [Foundation.URL]? = nil, pipVideoItem: Foundation.URL? = nil, draftedLaunchConfig: BanubaVideoEditorSDK.VideoEditorLaunchConfig.DraftedLaunchConfig? = nil, musicTrack: BanubaUtilities.MediaTrack? = nil, animated: Swift.Bool)
  @objc deinit
}
public struct ExportCoverImages {
  public var coverImage: UIKit.UIImage?
  public var gifFileUrl: Foundation.URL?
}
public protocol BanubaVideoEditorDelegate : AnyObject {
  func videoEditorDidCancel(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
  func videoEditorDone(_ videoEditor: BanubaVideoEditorSDK.BanubaVideoEditor)
}
public class BanubaVideoEditor {
  weak public var delegate: BanubaVideoEditorSDK.BanubaVideoEditorDelegate?
  public var musicMetadata: BanubaUtilities.MusicEditorMetadata? {
    get
  }
  public var metadata: BanubaUtilities.VideoEditorMetadata? {
    get
  }
  public var videoMetadata: BanubaUtilities.VideoMetadata? {
    get
  }
  public var pixelateEffectsList: BanubaUtilities.PixelateList? {
    get
  }
  public var asset: AVFoundation.AVAsset? {
    get
  }
  public var musicTrack: BanubaUtilities.MediaTrack? {
    get
  }
  public var draftsService: BanubaVideoEditorSDK.DraftsService {
    get
  }
  public var imageGenerator: AVFoundation.AVAssetImageGenerator? {
    get
  }
  public var currentConfiguration: BanubaVideoEditorSDK.VideoEditorConfig {
    get
  }
  public init?(token: Swift.String, isCameraEnabled: Swift.Bool = true, configuration: BanubaVideoEditorSDK.VideoEditorConfig, externalViewControllerFactory: BanubaVideoEditorSDK.ExternalViewControllerFactory? = nil)
  @objc deinit
  public func export(using configuration: VEExportSDK.ExportConfiguration, completion: @escaping ((_ success: Swift.Bool, _ error: Swift.Error?, _ exportCoverImages: BanubaVideoEditorSDK.ExportCoverImages?) -> Swift.Void))
  public func stopExport()
  public func isExporting() -> Swift.Bool
  public func exportAudio(fileUrl: Foundation.URL, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  public func clearSessionData()
  public func dismissVideoEditor(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  public func getVideoEditorNavigationController(withLaunchConfiguration configuration: BanubaVideoEditorSDK.VideoEditorLaunchConfig) -> UIKit.UINavigationController?
  public func presentVideoEditor(withLaunchConfiguration configuration: BanubaVideoEditorSDK.VideoEditorLaunchConfig, completion: (() -> Swift.Void)?)
  public func updateVideoEditorConfig(_ config: BanubaVideoEditorSDK.VideoEditorConfig)
}
extension BanubaVideoEditorSDK.BanubaVideoEditor {
  public static func presentFeedBackAlertViewController(from hostController: UIKit.UIViewController, animated: Swift.Bool, completion: @escaping (BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes) -> Swift.Void)
  public static var currentDevice: Swift.String {
    get
  }
}
public class TextEditSelectionBorderAnimationBehavior : BanubaVideoEditorSDK.TextEditSelectionColorBehavior {
  final public let defaultBorderWidth: CoreGraphics.CGFloat
  final public let selectedBorderWidth: CoreGraphics.CGFloat
  public init(defaultBorderWidth: CoreGraphics.CGFloat, selectedBorderWidth: CoreGraphics.CGFloat)
  public func setColorView(_ colorView: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultCountdownAnimatableView : BanubaVideoEditorSDK.CountdownTimerViewFactory {
  public func makeCountdownTimerView() -> BanubaUtilities.CountdownTimerAnimatableView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CountdownView : UIKit.UIView, BanubaUtilities.CountdownTimerAnimatableView {
  @_Concurrency.MainActor(unsafe) public var font: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
extension BanubaVideoEditorSDK.CountdownView {
  @_Concurrency.MainActor(unsafe) public var countdownDigit: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var digitColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func stop()
}
public protocol CountdownTimerViewFactory {
  func makeCountdownTimerView() -> BanubaUtilities.CountdownTimerAnimatableView
}
public struct ColorPair : Swift.Equatable {
  public let background: UIKit.UIColor
  public let foreground: UIKit.UIColor
  public init(background: UIKit.UIColor, foreground: UIKit.UIColor)
  public static func == (a: BanubaVideoEditorSDK.ColorPair, b: BanubaVideoEditorSDK.ColorPair) -> Swift.Bool
}
public struct VideoTextColorPair : Swift.Equatable {
  public let foreground: BanubaVideoEditorSDK.ColorPair
  public let background: BanubaVideoEditorSDK.ColorPair
  public init(colors: (UIKit.UIColor, UIKit.UIColor, UIKit.UIColor, UIKit.UIColor))
  public init(foreground: BanubaVideoEditorSDK.ColorPair, background: BanubaVideoEditorSDK.ColorPair)
  public static func == (lhs: BanubaVideoEditorSDK.VideoTextColorPair, rhs: BanubaVideoEditorSDK.VideoTextColorPair) -> Swift.Bool
}
public struct VideoTextFont : Swift.Equatable {
  public var font: UIKit.UIFont?
  public var name: Swift.String
  public init(font: UIKit.UIFont?, name: Swift.String)
  public static func == (a: BanubaVideoEditorSDK.VideoTextFont, b: BanubaVideoEditorSDK.VideoTextFont) -> Swift.Bool
}
public struct GiphyImage {
  public let id: Swift.String
  public let smallUrl: Foundation.URL
  public let originalUrl: Foundation.URL
}
public enum DeviceModel : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPad5, iPad6, iPad7, iPad8, iPadMini1, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadAir1, iPadAir2, iPadAir3, iPadAir4, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro3_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPadPro5_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6plus, iPhone6S, iPhone6Splus, iPhoneSE, iPhone7, iPhone7plus, iPhone8, iPhone8plus, iPhoneX, iPhoneXS, iPhoneXSmax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2ndGen, iPhone12, iPhone12Mini, iPhone12Pro, iPhone12ProMax, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: BanubaVideoEditorSDK.DeviceModel {
    get
  }
}
public protocol RecordButton : UIKit.UIView {
  var delegate: BanubaVideoEditorSDK.RecordButtonDelegate? { get set }
  var configuration: BanubaVideoEditorSDK.RecordButtonConfiguration? { get set }
  func changeViewToIdleState()
  func changeViewToRecordingState()
}
public protocol RecordButtonDelegate : AnyObject {
  var captureButtonMode: BanubaVideoEditorSDK.CaptureButtonViewMode { get }
  func recordButtonDidTakePhoto(_ recordButton: BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidCancelTakePhoto(_ recordButton: BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidStartVideoRecording(_ recordButton: BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidStopVideoRecording(_ recordButton: BanubaVideoEditorSDK.RecordButton)
  func recordButtonDidZoomingVideoRecording(_ recordButton: BanubaVideoEditorSDK.RecordButton, recognizer: UIKit.UILongPressGestureRecognizer)
}
public enum CaptureButtonViewMode {
  case video
  case photo
  public static func == (a: BanubaVideoEditorSDK.CaptureButtonViewMode, b: BanubaVideoEditorSDK.CaptureButtonViewMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VideoEditorConfig {
  public var videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration
  public var recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration
  public var editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration
  public var textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration
  public var toastConfiguration: BanubaVideoEditorSDK.ToastConfiguration
  public var fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration
  public var smallActivityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
  public var albumsConfiguration: BanubaUtilities.AlbumsConfiguration
  public var videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration
  public var videoDurationConfiguration: BanubaVideoEditorTrimSDK.VideoEditorDurationConfig
  public var gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration
  public var combinedGalleryConfiguration: BanubaUtilities.GalleryConfiguration
  public var trimVideosConfiguration: BanubaVideoEditorSDK.TrimVideosConfiguration
  public var trimVideoConfiguration: BanubaVideoEditorSDK.TrimVideoConfiguration
  public var filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration
  public var extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration
  public var musicEditorConfiguration: BanubaMusicEditorSDK.MusicEditorConfig
  public var overlayEditorConfiguration: BanubaOverlayEditorSDK.OverlayEditorConfiguration
  public var watermarkConfiguration: VideoEditor.WatermarkConfiguration?
  public var alertViewConfiguration: BanubaUtilities.AlertViewConfiguration
  public var popoverAlertViewConfiguration: BanubaUtilities.PopoverAlertViewConfiguration
  public var handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?
  public var pipSettingsConfiguration: BanubaVideoEditorSDK.PIPSettingsConfiguration?
  public var hintViewConfiguration: BanubaVideoEditorSDK.HintViewConfiguration?
  public var featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration
  public var isHandfreeEnabled: Swift.Bool
  public var draftsConfiguration: BanubaVideoEditorSDK.DraftsConfiguration
  public var aspectsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration
  public var transitionsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration
  public init()
  public init(videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration, recorderConfiguration: BanubaVideoEditorSDK.RecorderConfiguration, editorConfiguration: BanubaVideoEditorSDK.EditorConfiguration, textEditorConfiguration: BanubaVideoEditorSDK.TextEditorConfiguration, toastConfiguration: BanubaVideoEditorSDK.ToastConfiguration, fullScreenActivityConfiguration: BanubaVideoEditorSDK.FullScreenActivityConfiguration, smallActivityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration, albumsConfiguration: BanubaUtilities.AlbumsConfiguration, videoOverlayConfiguration: BanubaVideoEditorSDK.VideoOverlayConfiguration, videoDurationConfiguration: BanubaVideoEditorTrimSDK.VideoEditorDurationConfig, gifPickerConfiguration: BanubaVideoEditorSDK.GifPickerConfiguration, combinedGalleryConfiguration: BanubaUtilities.GalleryConfiguration, trimVideosConfiguration: BanubaVideoEditorSDK.TrimVideosConfiguration, trimVideoConfiguration: BanubaVideoEditorSDK.TrimVideoConfiguration, filterConfiguration: BanubaVideoEditorSDK.FilterConfiguration, extendedVideoCoverSelectionConfiguration: BanubaVideoEditorSDK.VideoCoverSelectionConfiguration, musicEditorConfiguration: BanubaMusicEditorSDK.MusicEditorConfig, overlayEditorConfiguration: BanubaOverlayEditorSDK.OverlayEditorConfiguration, featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration, watermarkConfiguration: VideoEditor.WatermarkConfiguration?, alertViewConfiguration: BanubaUtilities.AlertViewConfiguration, popoverAlertViewConfiguration: BanubaUtilities.PopoverAlertViewConfiguration, handsfreeConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration?, pipSettingsConfiguration: BanubaVideoEditorSDK.PIPSettingsConfiguration?, hintViewConfiguration: BanubaVideoEditorSDK.HintViewConfiguration?, draftsConfiguration: BanubaVideoEditorSDK.DraftsConfiguration, aspectsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration, transitionsConfiguration: BanubaVideoEditorSDK.EffectsListConfiguration)
  public mutating func applyFont(_ font: UIKit.UIFont)
  public mutating func updateAlertFonts(_ font: UIKit.UIFont)
  public mutating func updateRecorderFonts(_ font: UIKit.UIFont)
  public mutating func updateEditorFonts(_ font: UIKit.UIFont)
  public mutating func updateToastFonts(_ font: UIKit.UIFont)
  public mutating func updateFullScreenActivityFonts(_ font: UIKit.UIFont)
  public mutating func updateAlbumsFonts(_ font: UIKit.UIFont)
  public mutating func updateTextEditorFonts(_ font: UIKit.UIFont)
  public mutating func updateSlideShowFonts(_ font: UIKit.UIFont)
  public mutating func updateTrimVideosFonts(_ font: UIKit.UIFont)
  public mutating func updateTrimVideoFonts(_ font: UIKit.UIFont)
  public mutating func updateFilterFonts(_ font: UIKit.UIFont)
  public mutating func updateExtendedVideoCoverSelectionFonts(_ font: UIKit.UIFont)
  public mutating func updateFeatureConfiguration(featureConfiguration: BanubaVideoEditorSDK.FeatureConfiguration)
}
public struct TextEditorConfiguration {
  public var doneButton: BanubaUtilities.RoundedButtonConfiguration
  public var fontButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var colorButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var textBackgroundButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var alignmentImages: [BanubaVideoEditorSDK.VideoTextAligment : BanubaVideoEditorSDK.ImageButtonConfiguration]
  public var palette: [BanubaVideoEditorSDK.VideoTextColorPair]
  public var fonts: [BanubaVideoEditorSDK.VideoTextFont]
  public var additionalPaletteBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var palleteInsets: UIKit.UIEdgeInsets
  public var fontInsets: UIKit.UIEdgeInsets
  public var selectionColorBehavior: BanubaVideoEditorSDK.TextEditSelectionColorBehavior
  public var colorItemConfiguration: BanubaVideoEditorSDK.TextEditColorItemConfiguration
  public var fontItemConfiguration: BanubaVideoEditorSDK.TextEditFontItemConfiguration
  public var cursorColor: UIKit.UIColor
}
public struct TextEditColorItemConfiguration {
  public var borderColor: UIKit.UIColor
  public var borderWidth: CoreGraphics.CGFloat
  public init(borderColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat)
}
public struct TextEditFontItemConfiguration {
  public let titleColor: UIKit.UIColor
  public let fontSize: CoreGraphics.CGFloat
  public let cornerRadius: CoreGraphics.CGFloat
  public init(titleColor: UIKit.UIColor, fontSize: CoreGraphics.CGFloat, cornerRadius: CoreGraphics.CGFloat)
}
public struct VideoOverlayConfiguration {
  public var deleteImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var videoOverlayItemViewPixelateConfiguration: BanubaVideoEditorSDK.VideoOverlayItemViewConfiguration?
  public init(deleteImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, videoOverlayItemViewPixelateConfiguration: BanubaVideoEditorSDK.VideoOverlayItemViewConfiguration)
}
public struct FullScreenActivityConfiguration {
  public var labelFont: UIKit.UIFont
  public var cornerRadius: CoreGraphics.CGFloat
  public var activityEffectsViewAlpha: CoreGraphics.CGFloat
  public var activityIndicator: BanubaUtilities.SmallActivityIndicatorConfiguration
  public init(labelFont: UIKit.UIFont, cornerRadius: CoreGraphics.CGFloat, activityEffectsViewAlpha: CoreGraphics.CGFloat, activityIndicator: BanubaUtilities.SmallActivityIndicatorConfiguration)
}
public struct RecorderConfiguration {
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
  public var saveButton: BanubaUtilities.SaveButtonConfiguration?
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var backToDraftsButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var removeButtonImageName: Swift.String
  public var progressLabelConfiguration: BanubaUtilities.TextConfiguration?
  public var floatingLineViewConfiguration: BanubaUtilities.TextConfiguration?
  public var floatingLineViewWidth: CoreGraphics.CGFloat?
  public var captureButtonModes: Swift.Set<BanubaVideoEditorSDK.CaptureButtonViewMode>
  public var recordButtonConfiguration: BanubaVideoEditorSDK.RecordButtonConfiguration
  public var recordButtonProvider: BanubaVideoEditorSDK.RecordButtonProvider?
  public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  public var speedBarButtons: BanubaVideoEditorSDK.SpeedBarButtonsConfiguration
  public var galleryButton: BanubaUtilities.RoundedButtonConfiguration
  public var emptyGalleryImageName: Swift.String
  public var timerConfiguration: BanubaVideoEditorSDK.TimerConfiguration
  public var timeLineConfiguration: BanubaVideoEditorSDK.TimeLineConfiguration
  public var regularRecordButtonPosition: CoreGraphics.CGFloat
  public var recorderEffectsConfiguration: BanubaVideoEditorSDK.RecorderEffectsConfiguration
  public var leftControlsBottomOffsetFromCaptureButton: CoreGraphics.CGFloat
  public var leftControlsLeftOffset: CoreGraphics.CGFloat
  public var sequenceHeight: CoreGraphics.CGFloat
  public var loopAudioWhileRecording: Swift.Bool
  public var takeAudioDurationAsMaximum: Swift.Bool
  public var isDynamicMusicTitle: Swift.Bool
  public var isDefaultFrontCamera: Swift.Bool
  public var isMusicTitleFloatingLineEnabled: Swift.Bool
  public var useHEVCCodecIfPossible: Swift.Bool
  public var isPhotoSequenceAnimationEnabled: Swift.Bool
  public var muteMicrophoneForPIP: Swift.Bool
  public var isAudioRateEqualsVideoSpeed: Swift.Bool
  public var isGalleryButtonHidden: Swift.Bool
  public var supportMultiRecords: Swift.Bool
  public var videoCaptureButtonConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var photoCaptureButtonConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var backroundMusicContainerConfiguration: BanubaUtilities.BackgroundConfiguration?
  public var floatingViewSeparatedLines: Swift.Bool
  public var effectSelectorContainerCornerRadius: CoreGraphics.CGFloat
}
public struct RecordButtonConfiguration {
  public var idleStrokeColor: CoreGraphics.CGColor
  public var strokeColor: CoreGraphics.CGColor
  public var gradientColors: [CoreGraphics.CGColor]
  public var circularTimeLineIdleWidth: CoreGraphics.CGFloat
  public var circularTimeLineCaptureWidth: CoreGraphics.CGFloat
  public var normalImageName: Swift.String
  public var recordImageName: Swift.String
  public var photoImageName: Swift.String
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var defaultColorButton: UIKit.UIColor
  public var videoRecordColorButton: UIKit.UIColor
  public var takePhotoColorButton: UIKit.UIColor
  public var externalCircleFullColor: CoreGraphics.CGColor
  public var externalCircleStrokeColor: CoreGraphics.CGColor
}
public struct PIPSettingsConfiguration {
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var dragIndicatorConfiguration: BanubaUtilities.RoundedButtonConfiguration
  public var titleConfiguration: BanubaUtilities.TextConfiguration
  public var layoutSettingsButtonsConfiguration: [BanubaVideoEditorSDK.PIPSelectableCellConfiguration]
}
public struct TrimVideoConfiguration {
  public var saveButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var trimTimeLineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration
  public var trimTimeLineHeight: CoreGraphics.CGFloat
  public var playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var controlsPanelBackgroundColor: UIKit.UIColor
  public var trimmerPanelBackgroundColor: UIKit.UIColor
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var timeLabelsConfiguration: BanubaUtilities.TextConfiguration
}
public struct TimeLineConfiguration {
  public var isTimeLineHidden: Swift.Bool
  public var timeLineBackgroundColor: UIKit.UIColor
  public var progressBarColor: UIKit.UIColor
  public var progressBarSelectColor: UIKit.UIColor
  public var itemsCornerRadius: CoreGraphics.CGFloat
  public var separatorWidth: CoreGraphics.CGFloat
  public var separatorColor: UIKit.UIColor
}
public struct TransitionActionConfiguration {
  public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, height: CoreGraphics.CGFloat, clicableWidth: CoreGraphics.CGFloat, backgroundColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, shadowColor: UIKit.UIColor)
}
@objc public class TrimTimeLineConfiguration : ObjectiveC.NSObject {
  public var controlsColor: UIKit.UIColor
  public var cursorColor: UIKit.UIColor
  public var borderWidth: CoreGraphics.CGFloat
  public var trimContentCornerRadius: CoreGraphics.CGFloat
  public var timelineTopBottomInset: CoreGraphics.CGFloat
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
  public var draggerConfiguration: BanubaVideoEditorSDK.DraggerConfiguration
  public var transitionIcons: [BanubaUtilities.TransitionType : BanubaVideoEditorSDK.TransitionActionConfiguration]?
  public init(controlsColor: UIKit.UIColor, cursorColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat, trimContentCornerRadius: CoreGraphics.CGFloat, timelineTopBottomInset: CoreGraphics.CGFloat, videoResolution: BanubaUtilities.VideoResolutionConfiguration, draggerConfiguration: BanubaVideoEditorSDK.DraggerConfiguration, transitionIcons: [BanubaUtilities.TransitionType : BanubaVideoEditorSDK.TransitionActionConfiguration]? = nil)
  @objc deinit
}
public struct DraggerConfiguration {
  public var backgroundConfiguraiton: BanubaUtilities.BackgroundConfiguration
  public var numberOfLinesInDraggers: Swift.Int
  public var draggerLineSize: CoreGraphics.CGSize
  public var draggerLineBackgroundConfiguraion: BanubaUtilities.BackgroundConfiguration
  public var draggerImageName: Swift.String?
  public var draggerSize: CoreGraphics.CGSize
  public init(backgroundConfiguraiton: BanubaUtilities.BackgroundConfiguration, draggerImageName: Swift.String?, draggerSize: CoreGraphics.CGSize, numberOfLinesInDraggers: Swift.Int, draggerLineSize: CoreGraphics.CGSize, draggerLineBackgroundConfiguraion: BanubaUtilities.BackgroundConfiguration)
}
public struct EditorConfiguration {
  public var additionalEffectsButtons: [BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration]
  public var additionalEffectsButtonsBottomOffset: CoreGraphics.CGFloat
  public var videoResolution: BanubaUtilities.VideoResolutionConfiguration
  public var saveButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var editDraftBackButton: BanubaUtilities.BackButtonConfiguration
  public var openTrimButton: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration
  public var useHEVCCodecIfPossible: Swift.Bool
  public var isVideoAspectFillEnabled: Swift.Bool
  public var backgroundColor: UIKit.UIColor
}
public struct GifPickerConfiguration {
  public var regularFont: UIKit.UIFont
  public var boldFont: UIKit.UIFont
  public var activityConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
  public var cursorColor: UIKit.UIColor
  public var giphyAPIKey: Swift.String?
}
public struct TrimVideosConfiguration {
  public var videoResolutionConfiguration: BanubaUtilities.VideoResolutionConfiguration
  public var backButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var nextButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var controlsPanelBackgroundColor: UIKit.UIColor
  public var playerControlConfiguration: BanubaUtilities.PlayerControlConfiguration
  public var videoPartsBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var aspectsButton: BanubaVideoEditorSDK.ImageButtonConfiguration?
  public var timeLabelsConfiguration: BanubaUtilities.TextConfiguration
  public var editVideoItemTitleConfiguration: BanubaUtilities.TextConfiguration
  public var editVideoItems: [BanubaVideoEditorSDK.TrimVideoCompositionEditItem]
  public var addGalleryVideoButtonBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var addGalleryVideoImageButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var videoPartConfiguration: BanubaVideoEditorSDK.TrimVideoPartConfiguration
  public var reorderingVideoToolTipLabelConfiguration: BanubaUtilities.TextConfiguration
  public var trimTimelineConfiguration: BanubaVideoEditorSDK.TrimTimeLineConfiguration
  public var isGalleryButtonHidden: Swift.Bool
}
public struct TrimVideoPartConfiguration {
  public var borderWidth: CoreGraphics.CGFloat
  public var borderColor: UIKit.UIColor
  public var cornerRadius: CoreGraphics.CGFloat
  public var timeLabelConfiguration: BanubaUtilities.TextConfiguration
  public init(borderWidth: CoreGraphics.CGFloat, borderColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, timeLabelConfiguration: BanubaUtilities.TextConfiguration)
}
public struct TrimVideoCompositionEditItem {
  public enum TrimVideoCompositionEditItemType : Swift.CaseIterable {
    case rotate
    case split
    case delete
    case trim
    public static func == (a: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType, b: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType]
    public static var allCases: [BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let title: Swift.String
  public let icon: BanubaVideoEditorSDK.ImageConfiguration
  public let type: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType
  public init(title: Swift.String, icon: BanubaVideoEditorSDK.ImageConfiguration, type: BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType)
}
public struct FilterConfiguration {
  public var controlButtons: [BanubaVideoEditorSDK.FilterControlButtonConfig]
  public var controlsPanelBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var resetButton: BanubaUtilities.RoundedButtonConfiguration
  public var toolTipLabel: BanubaUtilities.TextConfiguration
  public var cursorButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var timelineCornerRadius: CoreGraphics.CGFloat
  public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  public var doneButtonHeight: CoreGraphics.CGFloat?
  public var timelineHeight: CoreGraphics.CGFloat
  public var timelineLeftOffset: CoreGraphics.CGFloat
  public var timelineRightOffset: CoreGraphics.CGFloat
  public var filtersHeight: CoreGraphics.CGFloat
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var preferredLutsOrder: [Swift.String]
  public var preferredMasksOrder: [Swift.String]
  public var preferredVideoEffectOrderAndSet: [VEEffectsSDK.VisualEffectApplicatorType]
}
public typealias TimerOptionBarConfiguration = BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration
public struct HandsfreeConfiguration {
  public struct TimerOptionBarConfiguration {
    public var selectorColor: UIKit.UIColor
    public var selectorTextColor: UIKit.UIColor
    public var optionBackgroundColor: UIKit.UIColor
    public var optionCornerRadius: CoreGraphics.CGFloat
    public var optionTextColor: UIKit.UIColor
    public var backgroundColor: UIKit.UIColor
    public var backgroundViewColor: UIKit.UIColor
    public var cornerRadius: CoreGraphics.CGFloat
    public var sliderCornerRadius: CoreGraphics.CGFloat
    public var barCornerRadius: CoreGraphics.CGFloat
    public var selectorEdgeInsets: UIKit.UIEdgeInsets
    public var activeThumbAndLineColor: UIKit.UIColor
    public var inactiveThumbAndLineColor: UIKit.UIColor
    public var minVideoDuration: Swift.Double
    public var buttonCornerRadius: CoreGraphics.CGFloat
    public var buttonBackgroundColor: UIKit.UIColor
    public var switchOnTintColor: UIKit.UIColor
    public var modeTitleColor: UIKit.UIColor
    public var dragTitleColor: UIKit.UIColor
    public var buttonTitleColor: UIKit.UIColor
    public var currentValueTextColor: UIKit.UIColor
    public var minimumValueTextColor: UIKit.UIColor
    public var maximumValueTextColor: UIKit.UIColor
    public var thumbLineViewColor: UIKit.UIColor
    public init(selectorColor: UIKit.UIColor, selectorTextColor: UIKit.UIColor, optionBackgroundColor: UIKit.UIColor, optionCornerRadius: CoreGraphics.CGFloat, optionTextColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, backgroundViewColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, sliderCornerRadius: CoreGraphics.CGFloat, barCornerRadius: CoreGraphics.CGFloat, selectorEdgeInsets: UIKit.UIEdgeInsets, activeThumbAndLineColor: UIKit.UIColor, inactiveThumbAndLineColor: UIKit.UIColor, minVideoDuration: Swift.Double, buttonCornerRadius: CoreGraphics.CGFloat, buttonBackgroundColor: UIKit.UIColor, switchOnTintColor: UIKit.UIColor, modeTitleColor: UIKit.UIColor, dragTitleColor: UIKit.UIColor, buttonTitleColor: UIKit.UIColor, currentValueTextColor: UIKit.UIColor, minimumValueTextColor: UIKit.UIColor, maximumValueTextColor: UIKit.UIColor, thumbLineViewColor: UIKit.UIColor)
  }
  public var timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration
  public init(timerOptionBarConfiguration: BanubaVideoEditorSDK.HandsfreeConfiguration.TimerOptionBarConfiguration)
}
public enum HintArrowPosition {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public static func == (a: BanubaVideoEditorSDK.HintArrowPosition, b: BanubaVideoEditorSDK.HintArrowPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct HintViewConfiguration {
  public struct ArrowConfiguration {
    public var position: BanubaVideoEditorSDK.HintArrowPosition
    public var arrowHeight: CoreGraphics.CGFloat
    public var cathetusLength: CoreGraphics.CGFloat
    public var curveControlOffset: CoreGraphics.CGFloat
  }
  public var cornerRadius: CoreGraphics.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var textInset: UIKit.UIEdgeInsets
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var arrowConfiguration: BanubaVideoEditorSDK.HintViewConfiguration.ArrowConfiguration
}
public protocol MusicSelectorViewController : UIKit.UIViewController {
  var delegate: BanubaVideoEditorSDK.MusicSelectorViewControllerDelegate? { get set }
}
public protocol MusicSelectorViewControllerDelegate {
  func didSelectFile(at url: Foundation.URL, title: Swift.String, id: Swift.Int64)
  func didClearSelection()
  func didCancel()
}
public protocol ExternalViewControllerFactory {
  var musicEditorFactory: BanubaMusicEditorSDK.MusicEditorExternalViewControllerFactory? { get set }
  var countdownTimerViewFactory: BanubaVideoEditorSDK.CountdownTimerViewFactory? { get set }
  var exposureViewFactory: BanubaVideoEditorSDK.AnimatableViewFactory? { get set }
  var galleryViewControllerFactory: BanubaUtilities.GalleryViewControllerFactory? { get set }
}
extension BanubaVideoEditorSDK.ExternalViewControllerFactory {
  public var galleryViewControllerFactory: BanubaUtilities.GalleryViewControllerFactory? {
    get
    set
  }
}
public struct AnalyticsDefaults {
  public static let recorderScreenName: Swift.String
  public static let editorScreenName: Swift.String
  public static let tapGestureName: Swift.String
  public static let longTapGestureName: Swift.String
  public static let colorEffectTypeName: Swift.String
  public static let visualEffectTypeName: Swift.String
  public static let timeEffectTypeName: Swift.String
}
public protocol TimelineViewControllerDelegate : AnyObject {
  func changeVideoPosition(on time: CoreMedia.CMTime)
  func shouldPauseVideo()
}
public struct PIPSwitchCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPSwitchLayoutSetting
  public var selectedIdentifier: BanubaSDKServicing.PIPSwitchLayoutSetting
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreGraphics.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public init(identifier: BanubaSDKServicing.PIPSwitchLayoutSetting, selectedIdentifier: BanubaSDKServicing.PIPSwitchLayoutSetting, textConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor, cornerRadius: CoreGraphics.CGFloat?, backgroundColor: UIKit.UIColor)
}
public struct PIPCameraCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPCameraLayoutSetting
  public var selectedIdentifier: BanubaSDKServicing.PIPCameraLayoutSetting
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var selectedTextConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreGraphics.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public init(identifier: BanubaSDKServicing.PIPCameraLayoutSetting, selectedIdentifier: BanubaSDKServicing.PIPCameraLayoutSetting, textConfiguration: BanubaUtilities.TextConfiguration, selectedTextConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor, cornerRadius: CoreGraphics.CGFloat?, backgroundColor: UIKit.UIColor)
}
public struct PIPSelectableCellConfiguration {
  public var identifier: BanubaSDKServicing.PIPPlayerLayoutSetting
  public var switchCellConfiguration: BanubaVideoEditorSDK.PIPSwitchCellConfiguration?
  public var cameraCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration
  public var croppingCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration?
  public var textConfiguration: BanubaUtilities.TextConfiguration
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var borderWidth: CoreGraphics.CGFloat
  public var borderColor: CoreGraphics.CGColor
  public var isRoundedImageView: Swift.Bool
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor
  public var additionalButtonWidth: CoreGraphics.CGFloat
  public var additionalButtonHeight: CoreGraphics.CGFloat
  public init(identifier: BanubaSDKServicing.PIPPlayerLayoutSetting, switchCellConfiguration: BanubaVideoEditorSDK.PIPSwitchCellConfiguration?, croppingCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration? = nil, cameraCellConfiguration: BanubaVideoEditorSDK.PIPCameraCellConfiguration, textConfiguration: BanubaUtilities.TextConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor, isRoundedImageView: Swift.Bool, cornerRadius: CoreGraphics.CGFloat?, backgroundColor: UIKit.UIColor, additionalButtonWidth: CoreGraphics.CGFloat = 130, additionalButtonHeight: CoreGraphics.CGFloat = 32)
}
public struct TextShadowConfiguration {
  public var shadowColor: UIKit.UIColor
  public var shadowOffset: CoreGraphics.CGSize
  public var shadowBlurRadius: CoreGraphics.CGFloat
  public init(shadowColor: UIKit.UIColor = UIColor.black.withAlphaComponent(0.4), shadowOffset: CoreGraphics.CGSize = CGSize(width: 0, height: 1), shadowBlurRadius: CoreGraphics.CGFloat = 2.0)
  public func shadow() -> UIKit.NSShadow
}
public struct SpeedBarButtonsConfiguration {
  public var imageNameHalf: Swift.String
  public var imageNameNormal: Swift.String
  public var imageNameDouble: Swift.String
  public var imageNameTriple: Swift.String
  public var selectedTitleColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var cornerRadius: CoreGraphics.CGFloat?
  public init(imageNameHalf: Swift.String, imageNameNormal: Swift.String, imageNameDouble: Swift.String, imageNameTriple: Swift.String, selectedTitleColor: UIKit.UIColor, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat?)
}
public struct ToastConfiguration {
  public var kern: Swift.Double
  public var font: UIKit.UIFont
  public var cornerRadius: CoreGraphics.CGFloat
  public var textColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(kern: Swift.Double, font: UIKit.UIFont, cornerRadius: CoreGraphics.CGFloat, textColor: UIKit.UIColor = .white, backgroundColor: UIKit.UIColor = .black)
}
public struct AdditionalEffectsButtonConfiguration {
  public enum Position : Swift.Int {
    case top
    case bottom
    case center
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration
  public var selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextButtonConfiguration?
  public var titlePosition: BanubaVideoEditorSDK.TitlePosition?
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position?
  public var imageTitleSpacing: CoreGraphics.CGFloat?
  public var defaultTitleAlpha: CoreGraphics.CGFloat?
  public var selectedTitleAlpha: CoreGraphics.CGFloat?
  public var cornerRadius: CoreGraphics.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var contentInsets: CoreGraphics.CGFloat
  public init(identifier: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?, title: BanubaUtilities.TextButtonConfiguration? = nil, titlePosition: BanubaVideoEditorSDK.TitlePosition? = nil, width: CoreGraphics.CGFloat = 50, height: CoreGraphics.CGFloat = 50, position: BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position? = nil, imageTitleSpacing: CoreGraphics.CGFloat? = nil, defaultTitleAlpha: CoreGraphics.CGFloat? = nil, selectedTitleAlpha: CoreGraphics.CGFloat? = nil, cornerRadius: CoreGraphics.CGFloat = .zero, backgroundColor: UIKit.UIColor = .clear, contentInsets: CoreGraphics.CGFloat = 8.5)
  public enum ButtonType : Swift.String {
    case link
    case color
    case sticker
    case text
    case time
    case sound
    case effects
    case toggle
    case flashlight
    case timer
    case speed
    case beauty
    case masks
    case muteSound
    case interactive
    case pip
    case pixelate
    case trimDraft
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum TitlePosition {
  case top
  case left
  case right
  case bottom
  public static func == (a: BanubaVideoEditorSDK.TitlePosition, b: BanubaVideoEditorSDK.TitlePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RecordButtonProvider {
  func getButton() -> BanubaVideoEditorSDK.RecordButton
}
@objc public enum DraftsFeatureConfig : Swift.Int, Swift.CaseIterable {
  case enabled = 0
  case enabledSaveToDraftsByDefault = 1
  case disabled = 2
  case enabledAskIfSaveNotExport
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BanubaVideoEditorSDK.DraftsFeatureConfig]
  public typealias RawValue = Swift.Int
  public static var allCases: [BanubaVideoEditorSDK.DraftsFeatureConfig] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct FeatureConfiguration {
  public var isBlurEffectsExportable: Swift.Bool
  public var isOverlayEditorEnabled: Swift.Bool
  public var isDoubleTapForToggleCameraEnabled: Swift.Bool
  public var isMuteCameraAudioEnabled: Swift.Bool
  public var isVideoCoverSelectionEnabled: Swift.Bool
  public var supportsTrimRecordedVideo: Swift.Bool
  public var draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig
  public var isAspectsEnabled: Swift.Bool
  public var isSpeedBarEnabled: Swift.Bool
  public var isVideoFitsAspect: Swift.Bool
  public var openAutomaticallyPIPSettingsDropdown: Swift.Bool
  public var useTransitions: Swift.Bool
  public static let `default`: BanubaVideoEditorSDK.FeatureConfiguration
  public init(isOverlayEditorEnabled: Swift.Bool, isDoubleTapForToggleCameraEnabled: Swift.Bool, isMuteCameraAudioEnabled: Swift.Bool, isVideoCoverSelectionEnabled: Swift.Bool, isSimpleVideoCoverEnabled: Swift.Bool, supportsTrimRecordedVideo: Swift.Bool, draftsConfig: BanubaVideoEditorSDK.DraftsFeatureConfig, isAspectsEnabled: Swift.Bool, isSpeedBarEnabled: Swift.Bool, isVideoFitsAspect: Swift.Bool, isBlurEffectsExportable: Swift.Bool, openAutomaticallyPIPSettingsDropdown: Swift.Bool, useTransitions: Swift.Bool)
}
public struct RecorderEffectsConfiguration {
  public var cornerRadius: CoreGraphics.CGFloat
  public var backgroundColor: UIKit.UIColor
  public var screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration
  public var effectsHeight: CoreGraphics.CGFloat
  public var effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration
  public var effectAdditionalMediaPickerConfiguration: BanubaVideoEditorSDK.EffectAdditionalMediaPickerConfiguration
  public var preferredLutsOrder: [Swift.String]
  public var preferredMasksOrder: [Swift.String]
  public init(cornerRadius: CoreGraphics.CGFloat, backgroundColor: UIKit.UIColor, screenNameConfiguration: BanubaVideoEditorSDK.ScreenNameConfiguration, effectsHeight: CoreGraphics.CGFloat, effectItemConfiguration: BanubaVideoEditorSDK.EffectItemConfiguration, effectAdditionalMediaPickerConfiguration: BanubaVideoEditorSDK.EffectAdditionalMediaPickerConfiguration, preferredLutsOrder: [Swift.String], preferredMasksOrder: [Swift.String])
}
public struct EffectAdditionalMediaPickerConfiguration {
  public var galleryAssetItemConfiguration: BanubaVideoEditorSDK.GalleryAssetItemConfiguration
  public var infoLabelConfiguration: BanubaUtilities.TextConfiguration
  public var allowGalleryAccessButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var noMediaLabelConfiguration: BanubaUtilities.TextConfiguration
  public var openGalleryButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public init(galleryAssetItemConfiguration: BanubaVideoEditorSDK.GalleryAssetItemConfiguration, infoLabelConfiguration: BanubaUtilities.TextConfiguration, allowGalleryAccessButtonConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration, noMediaLabelConfiguration: BanubaUtilities.TextConfiguration, openGalleryButtonConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration)
}
public struct GalleryAssetItemConfiguration {
  public var durationConfiguration: BanubaUtilities.TextConfiguration
  public var cornerRadius: CoreGraphics.CGFloat
  public var selectionColor: UIKit.UIColor
  public var borderWidth: CoreGraphics.CGFloat
  public var normalImage: BanubaVideoEditorSDK.ImageConfiguration
  public var activityIndicatorConfiguration: BanubaUtilities.SmallActivityIndicatorConfiguration
}
public struct TimerConfiguration {
  public struct TimerOptionConfiguration : Swift.Equatable {
    public var button: BanubaVideoEditorSDK.ImageButtonConfiguration
    public var startingTimerSeconds: Swift.Int
    public var stoppingTimerSeconds: Swift.Int
    public var description: Swift.String?
    public static func == (lhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration, rhs: BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration) -> Swift.Bool
    public init(button: BanubaVideoEditorSDK.ImageButtonConfiguration, startingTimerSeconds: Swift.Int, stoppingTimerSeconds: Swift.Int, description: Swift.String? = nil)
  }
  public var defaultButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var options: [BanubaVideoEditorSDK.TimerConfiguration.TimerOptionConfiguration]
  public var soundPath: Swift.String?
}
public struct ScreenNameConfiguration {
  public var isHidden: Swift.Bool
  public var style: BanubaUtilities.TextConfiguration?
  public init(isHidden: Swift.Bool, style: BanubaUtilities.TextConfiguration? = nil)
}
public struct GalleryVideoPartsConfiguration {
  public var addGalleryVideoPartImageName: Swift.String
  public var videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration
  public init(addGalleryVideoPartImageName: Swift.String, videoPartConfiguration: BanubaVideoEditorSDK.GalleryVideoPartsConfiguration.GalleryVideoPartConfiguration)
  public struct GalleryVideoPartConfiguration {
    public var selectionColor: UIKit.UIColor
    public var durationLabelConfiguration: BanubaUtilities.TextConfiguration
    public var cornerRadius: CoreGraphics.CGFloat
    public var imageCornerRadius: CoreGraphics.CGFloat
    public var imageInsets: UIKit.UIEdgeInsets
    public var scissorsImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
    public init(selectionColor: UIKit.UIColor, durationLabelConfiguration: BanubaUtilities.TextConfiguration, cornerRadius: CoreGraphics.CGFloat, imageCornerRadius: CoreGraphics.CGFloat, imageInsets: UIKit.UIEdgeInsets, scissorsImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?)
  }
}
public struct EffectItemConfiguration {
  public var titleStyle: BanubaUtilities.TextConfiguration
  public var selectionColor: UIKit.UIColor
  public var cornerRadius: CoreGraphics.CGFloat
  public var borderWidth: CoreGraphics.CGFloat
  public var selectWhenHighlight: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var imageInsets: UIKit.UIEdgeInsets
  public var imageCornerRadius: CoreGraphics.CGFloat
  public var imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration?
  public var alwaysShowTitle: Swift.Bool
  public var showMasksTitle: Swift.Bool
  public var showEffectsTitle: Swift.Bool
  public var downloadIcon: BanubaVideoEditorSDK.ImageConfiguration?
  public var progressViewFactory: BanubaVideoEditorSDK.ProgressAnimatableViewFactory?
  public init(titleStyle: BanubaUtilities.TextConfiguration, selectionColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, borderWidth: CoreGraphics.CGFloat, selectWhenHighlight: Swift.Bool, backgroundColor: UIKit.UIColor, imageInsets: UIKit.UIEdgeInsets, imageCornerRadius: CoreGraphics.CGFloat, imagePlaceholder: BanubaVideoEditorSDK.ImageConfiguration? = nil, alwaysShowTitle: Swift.Bool, showMasksTitle: Swift.Bool, showEffectsTitle: Swift.Bool, downloadIcon: BanubaVideoEditorSDK.ImageConfiguration? = nil, progressViewFactory: BanubaVideoEditorSDK.ProgressAnimatableViewFactory? = nil)
}
public struct BanubaButtonConfiguration {
  public var imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextButtonConfiguration
  public var titlePosition: BanubaVideoEditorSDK.TitlePosition
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var background: BanubaUtilities.BackgroundConfiguration
  public var imageTitleSpacing: CoreGraphics.CGFloat
  public init(title: BanubaUtilities.TextButtonConfiguration, titlePosition: BanubaVideoEditorSDK.TitlePosition = .bottom, width: CoreGraphics.CGFloat = 50, height: CoreGraphics.CGFloat = 50, background: BanubaUtilities.BackgroundConfiguration, imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil, imageTitleSpacing: CoreGraphics.CGFloat = 0.0)
}
public struct TimeLabelConfiguration {
  public var textInsets: UIKit.UIEdgeInsets
  public var cornerRadius: CoreGraphics.CGFloat
  public var defaultColor: UIKit.UIColor
  public var errorColor: UIKit.UIColor
  public var style: BanubaUtilities.TextConfiguration
  public init(textInsets: UIKit.UIEdgeInsets, cornerRadius: CoreGraphics.CGFloat, defaultColor: UIKit.UIColor, errorColor: UIKit.UIColor, style: BanubaUtilities.TextConfiguration)
}
public struct VideoCoverSelectionConfiguration {
  public var cancelButton: BanubaUtilities.RoundedButtonConfiguration
  public var doneButton: BanubaUtilities.RoundedButtonConfiguration
  public var titleLabel: BanubaUtilities.TextConfiguration?
  public var toolTipLabel: BanubaUtilities.TextConfiguration
  public var selectorColor: UIKit.UIColor
  public var selectGalleryImageButton: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var deleteImageButtonImageConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var previewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var numberOfThumbnails: Swift.Int
  public var galleryImageCompressionQuality: CoreGraphics.CGFloat
  public init(cancelButton: BanubaUtilities.RoundedButtonConfiguration, doneButton: BanubaUtilities.RoundedButtonConfiguration, titleLabel: BanubaUtilities.TextConfiguration?, toolTipLabel: BanubaUtilities.TextConfiguration, selectorColor: UIKit.UIColor, selectGalleryImageButton: BanubaVideoEditorSDK.BanubaButtonConfiguration, deleteImageButtonImageConfiguration: BanubaVideoEditorSDK.BanubaButtonConfiguration, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration, previewBackgroundConfiguration: BanubaUtilities.BackgroundConfiguration, thumbnailsCursorConfiguration: BanubaVideoEditorSDK.ImageButtonConfiguration, numberOfThumbnails: Swift.Int, galleryImageCompressionQuality: CoreGraphics.CGFloat)
}
public struct FilterControlButtonConfig {
  public enum `Type` : Swift.String {
    case cancel
    case play
    case done
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`
  public let imageName: Swift.String
  public let selectedImageName: Swift.String?
  public let imageEdgeInsets: UIKit.UIEdgeInsets?
  public init(type: BanubaVideoEditorSDK.FilterControlButtonConfig.`Type`, imageName: Swift.String, selectedImageName: Swift.String?, imageEdgeInsets: UIKit.UIEdgeInsets? = nil)
}
@objc public class ImageConfiguration : ObjectiveC.NSObject, BanubaUtilities.ImageConfigurationProtocol {
  public var imageName: Swift.String
  @objc public var tintColor: UIKit.UIColor?
  @objc public var image: UIKit.UIImage? {
    @objc get
  }
  public init(imageName: Swift.String, tintColor: UIKit.UIColor? = nil)
  public init(image: UIKit.UIImage, tintColor: UIKit.UIColor? = nil)
  @objc deinit
}
public struct ImageButtonConfiguration : BanubaUtilities.ImageButtonConfigurationProtocol {
  public var imageConfiguration: BanubaUtilities.ImageConfigurationProtocol
  public var selectedImageConfiguration: BanubaUtilities.ImageConfigurationProtocol?
  public init(imageConfiguration: BanubaVideoEditorSDK.ImageConfiguration, selectedImageConfiguration: BanubaVideoEditorSDK.ImageConfiguration? = nil)
}
public struct DraftsConfiguration {
  public var backButton: BanubaUtilities.BackButtonConfiguration
  public var title: BanubaUtilities.TextConfiguration
  public var draftItem: BanubaVideoEditorSDK.DraftItemConfiguration
  public var emptyDraftsImage: BanubaVideoEditorSDK.ImageConfiguration
  public var emptyDraftsLabel: BanubaUtilities.TextConfiguration
}
public struct ActionMenuConfiguration {
  public var dragIndicatorColor: UIKit.UIColor
  public var bacgroundViewCornerRadius: CoreGraphics.CGFloat
  public var previewImageViewCornerRadius: CoreGraphics.CGFloat
}
public struct DraftItemConfiguration {
  public var infoLabel: BanubaUtilities.TextConfiguration
  public var subinfoLabel: BanubaUtilities.TextConfiguration
  public var menuImage: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var cornerRadius: CoreGraphics.CGFloat
  public var menuItems: [BanubaUtilities.PopoverAlertViewController.ActionType]
  public init(infoLabel: BanubaUtilities.TextConfiguration, subinfoLabel: BanubaUtilities.TextConfiguration, menuImage: BanubaVideoEditorSDK.ImageButtonConfiguration, cornerRadius: CoreGraphics.CGFloat, menuItems: [BanubaUtilities.PopoverAlertViewController.ActionType])
}
public enum DraftMenuItemType {
  case edite
  case remove
  public static func == (a: BanubaVideoEditorSDK.DraftMenuItemType, b: BanubaVideoEditorSDK.DraftMenuItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DraftMenuItem {
  public var type: BanubaVideoEditorSDK.DraftMenuItemType
  public var name: BanubaUtilities.TextConfiguration
  public var image: BanubaVideoEditorSDK.ImageConfiguration?
  public init(type: BanubaVideoEditorSDK.DraftMenuItemType, name: BanubaUtilities.TextConfiguration, image: BanubaVideoEditorSDK.ImageConfiguration?)
}
public struct EffectListItemConfiguration {
  public enum `Type` : Swift.Equatable {
    case aspect(BanubaUtilities.AspectRatio)
    case transition(BanubaUtilities.TransitionType)
    public static func == (a: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, b: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`) -> Swift.Bool
  }
  public var effect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`
  public var icon: BanubaVideoEditorSDK.ImageConfiguration?
  public var title: BanubaUtilities.TextConfiguration
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var selectedColor: UIKit.UIColor
  public init(effect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, icon: BanubaVideoEditorSDK.ImageConfiguration?, title: BanubaUtilities.TextConfiguration, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, selectedColor: UIKit.UIColor)
}
public struct EffectsListConfiguration {
  public var cancelButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var doneButton: BanubaVideoEditorSDK.ImageButtonConfiguration
  public var backgroundConfiguration: BanubaUtilities.BackgroundConfiguration
  public var backgroundControlsViewColor: UIKit.UIColor
  public var effects: [BanubaVideoEditorSDK.EffectListItemConfiguration]
  public var defaultEffect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`
  public var primaryAspect: BanubaUtilities.AspectRatio?
  public init(cancelButton: BanubaVideoEditorSDK.ImageButtonConfiguration, doneButton: BanubaVideoEditorSDK.ImageButtonConfiguration, backgroundConfiguration: BanubaUtilities.BackgroundConfiguration, backgroundControlsViewColor: UIKit.UIColor, effects: [BanubaVideoEditorSDK.EffectListItemConfiguration], defaultEffect: BanubaVideoEditorSDK.EffectListItemConfiguration.`Type`, primaryAspect: BanubaUtilities.AspectRatio? = nil)
}
public struct VideoOverlayItemViewConfiguration {
  public var scaleIconWidth: CoreGraphics.CGFloat
  public var scaleIconHeight: CoreGraphics.CGFloat
  public var overlaySelectedBorderWidth: CoreGraphics.CGFloat
  public var overlaySelectedBorderColor: CoreGraphics.CGColor
  public var scaleIconImageName: Swift.String
  public var pixelateItemMinSize: CoreGraphics.CGSize
  public init(scaleIconWidth: CoreGraphics.CGFloat, scaleIconHeight: CoreGraphics.CGFloat, overlaySelectedBorderWidth: CoreGraphics.CGFloat, overlaySelectedBorderColor: CoreGraphics.CGColor, scaleIconImageName: Swift.String, pixelateItemMinSize: CoreGraphics.CGSize)
}
extension VideoEditor.VideoEditorService : BanubaMusicEditorSDK.VideoEditorServiceAdoptable {
  public var isMultiAudioEnabled: Swift.Bool {
    get
  }
  public func changeMusicTrackPosition(currentTime: Swift.Double, durationInSeconds: Swift.Double, compositionTimeRange: CoreMedia.CMTimeRange, composition: AVFoundation.AVMutableCompositionTrack, assetTrack: AVFoundation.AVAssetTrack, audioTrack: BanubaUtilities.AudioTrackAdoptable) -> CoreMedia.CMTimeRange?
  public func addMusicTrack(didSelectFile url: Foundation.URL, isEditable: Swift.Bool, title: Swift.String, additionalTitle: Swift.String?, id: Swift.Int32, start: CoreMedia.CMTime, duration: CoreMedia.CMTime?, trimmedStart: Foundation.TimeInterval?) -> (asset: AVFoundation.AVURLAsset, timeRange: CoreMedia.CMTimeRange, composition: AVFoundation.AVMutableCompositionTrack, compositionStart: CoreMedia.CMTime, avAssetTrack: AVFoundation.AVAssetTrack)?
  public func videoTrackVolume() -> Swift.Float
  public func musicTrackVolume(_ track: BanubaUtilities.AudioTrackAdoptable) -> Swift.Float
  public func setVideoTrackVolume(_ volume: Swift.Float, to player: BanubaUtilities.VideoEditorPlayable)
  public func setMusicTrackVolume(_ track: BanubaUtilities.AudioTrackAdoptable, volume: Swift.Float, to player: BanubaUtilities.VideoEditorPlayable)
  public func removeMusicTrack(_ track: BanubaUtilities.AudioTrackAdoptable) -> Swift.Bool
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open class func animateWorkarounding(withDuration duration: Foundation.TimeInterval, animations: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
public enum EffectType {
  case mask
  case effect
  case videoEditorEffect
  public static func == (a: BanubaVideoEditorSDK.EffectType, b: BanubaVideoEditorSDK.EffectType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIColor {
  convenience public init?(colorParams: BanubaUtilities.ColorParams)
}
public enum VideoRecordSpeed : Swift.Int, Swift.CaseIterable {
  case half
  case normal
  case double
  case triple
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [BanubaVideoEditorSDK.VideoRecordSpeed]
  public typealias RawValue = Swift.Int
  public static var allCases: [BanubaVideoEditorSDK.VideoRecordSpeed] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SDKCameraChangedDelegate : AnyObject {
  func sdkDidChangeCamera(cameraStartedCompletion: (() -> Swift.Void)?)
  func sdkWillChangeCamera()
}
public protocol SDKCameraServicing {
  var videoRecordSpeed: BanubaVideoEditorSDK.VideoRecordSpeed { get set }
  var isARCameraSupported: Swift.Bool { get }
  var cameraChangedDelegate: BanubaVideoEditorSDK.SDKCameraChangedDelegate? { get set }
  var renderQueue: Dispatch.DispatchQueue { get }
  var playerViewSize: CoreGraphics.CGSize { get }
  var autoStart: Swift.Bool { get set }
  var allowProcessing: Swift.Bool { get set }
  var isLoaded: Swift.Bool { get }
  func effectsPaths(includeBeautyEffect: Swift.Bool) -> [Swift.String]
  func setupCamera()
  func setupPostprocessing()
  func destroy()
  func start(completion: @escaping () -> Swift.Void)
  func stop()
  func stop(completion: (() -> Swift.Void)?)
  func applyFilter(_ filter: BanubaSDKServicing.EffectModel)
  func removeFilter(_ filter: BanubaSDKServicing.EffectModel)
  func removeAllFilters()
  func startRenderLoop()
  func stopRenderLoop()
  func loadMask(name: Swift.String)
  func unloadMask()
  func setRenderTarget(view: UIKit.UIView)
  func removeRenderTarget()
  func toggleBeautification() -> Swift.Bool
  func discardAppliedChanges()
  func configurePhotoModeIfNeeded(isFrontCamera: Swift.Bool, isEnableTorch: Swift.Bool)
  func getRendererView() -> UIKit.UIView
  func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  func replaceCamera(_ camera: BanubaSDKServicing.CameraModule, completion: (() -> Swift.Void)?)
}
public class SDKCameraService : BanubaVideoEditorSDK.SDKCameraServicing {
  weak public var cameraChangedDelegate: BanubaVideoEditorSDK.SDKCameraChangedDelegate?
  public var videoRecordSpeed: BanubaVideoEditorSDK.VideoRecordSpeed
  public var isLoaded: Swift.Bool {
    get
  }
  public var playerViewSize: CoreGraphics.CGSize {
    get
  }
  public var autoStart: Swift.Bool {
    get
    set
  }
  public var allowProcessing: Swift.Bool {
    get
    set
  }
  public var isARCameraSupported: Swift.Bool {
    get
  }
  public var renderQueue: Dispatch.DispatchQueue {
    get
  }
  required public init(cameraModule: BanubaSDKServicing.CameraModule, masksPostprocessingServicing: BanubaSDKServicing.SDKMaskPostprocessServicing?)
  @objc deinit
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func setupCamera()
  public func setupPostprocessing()
  public func destroy()
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func configurePhotoModeIfNeeded(isFrontCamera: Swift.Bool, isEnableTorch: Swift.Bool)
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func replaceCamera(_ camera: BanubaSDKServicing.CameraModule, completion: (() -> Swift.Void)?)
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func start(completion: @escaping () -> Swift.Void)
  public func stop()
  public func stop(completion: (() -> Swift.Void)?)
  public func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func effectsPaths(includeBeautyEffect: Swift.Bool) -> [Swift.String]
  public func applyFilter(_ filter: BanubaSDKServicing.EffectModel)
  public func removeFilter(_ filter: BanubaSDKServicing.EffectModel)
  public func removeAllFilters()
  public func loadMask(name: Swift.String)
  public func unloadMask()
  public func toggleBeautification() -> Swift.Bool
  public func discardAppliedChanges()
}
extension BanubaVideoEditorSDK.SDKCameraService {
  public func startRenderLoop()
  public func stopRenderLoop()
  public func setRenderTarget(view: UIKit.UIView)
  public func removeRenderTarget()
  public func getRendererView() -> UIKit.UIView
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FeedbackAlertViewController : UIKit.UIViewController {
  public enum ActionTypes {
    case agree
    case refuse
    case cancel
    public static func == (a: BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes, b: BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var actionHandler: ((BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BanubaVideoEditorSDK.FeedbackAlertViewController {
  @_Concurrency.MainActor(unsafe) public static func makeAlertViewController() -> BanubaVideoEditorSDK.FeedbackAlertViewController
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
  public func get() throws -> T
  public func map<U>(_ transform: (T) -> U) -> BanubaVideoEditorSDK.Result<U>
}
public protocol AnimatableViewFactory {
  func makeAnimatableView() -> BanubaUtilities.AnimatableView
}
@_hasMissingDesignatedInitializers public class DraftsService {
  public func getDrafts() -> [VideoEditor.VideoSequence]
  public func removeVideoSequence(_ videoSequence: VideoEditor.VideoSequence) -> Swift.Bool
  public func getPreviewForVideoSequence(_ videoSequence: VideoEditor.VideoSequence, thumbnailHeight: CoreGraphics.CGFloat, completion: ((_ preview: UIKit.UIImage?) -> Swift.Void)?)
  @objc deinit
}
public protocol ExternalMaskProviding {
  var didReceiveExternalMasks: (([BanubaVideoEditorSDK.ExternalMask]) -> Swift.Void)? { get set }
  var masks: [BanubaVideoEditorSDK.ExternalMask] { get }
  func requestMask(_ mask: BanubaVideoEditorSDK.ExternalMask, statusUpdateHandler: ((BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Void)?)
  func cancelMaskDownloading(_ mask: BanubaVideoEditorSDK.ExternalMask)
  func requestMaskPreview(_ mask: BanubaVideoEditorSDK.ExternalMask, completion: ((UIKit.UIImage?, Swift.Error?) -> Swift.Void)?)
}
public protocol ExternalMask {
  var id: Swift.UInt { get }
  var maskType: Swift.String? { get }
  var name: Swift.String { get }
  var url: Foundation.URL { get }
  var previewImageURL: Foundation.URL { get }
  var status: BanubaVideoEditorSDK.ExternalMaskStatus { get }
}
public enum ExternalMaskStatus : Swift.Equatable {
  case startDownloading
  case notDownloaded
  case downloaded(path: Foundation.URL, shouldApply: Swift.Bool)
  case downloading(progress: Swift.Float)
  case error(Swift.Error)
  public static let downloadEffectMaxProgress: Swift.Float
  public static let downloadEffectMinProgress: Swift.Float
  public static func == (lhs: BanubaVideoEditorSDK.ExternalMaskStatus, rhs: BanubaVideoEditorSDK.ExternalMaskStatus) -> Swift.Bool
}
public enum VideoTextAligment : Swift.Int {
  case left
  case center
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BanubaUtilities.SmallActivityIndicatorConfiguration {
  public static var config: BanubaUtilities.SmallActivityIndicatorConfiguration {
    get
  }
}
extension BanubaVideoEditorSDK.FullScreenActivityConfiguration {
  public static var config: BanubaVideoEditorSDK.FullScreenActivityConfiguration {
    get
  }
}
extension VideoEditor.WatermarkConfiguration {
  public static var config: VideoEditor.WatermarkConfiguration {
    get
  }
}
public protocol TextEditSelectionColorBehavior {
  func setColorView(_ view: UIKit.UIView, selected: Swift.Bool, animated: Swift.Bool)
}
public class DefaultExposureViewFactory : BanubaVideoEditorSDK.AnimatableViewFactory {
  public init()
  public func makeAnimatableView() -> BanubaUtilities.AnimatableView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ExposureAnimationView : UIKit.UIView, BanubaUtilities.AnimatableView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func start(completion: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func stop()
  @objc deinit
}
public protocol ProgressAnimatableViewFactory {
  func makeProgressAnimatableView() -> BanubaUtilities.ProgressAnimatableView
}
@_hasMissingDesignatedInitializers public class CircularProgressViewFactory : BanubaVideoEditorSDK.ProgressAnimatableViewFactory {
  public func makeProgressAnimatableView() -> BanubaUtilities.ProgressAnimatableView
  @objc deinit
}
public enum ContentLocationType : Swift.Int {
  case remote
  case local
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol EffectViewModel : AnyObject {
  var type: BanubaVideoEditorSDK.EffectType { get }
  var image: UIKit.UIImage? { get set }
  var title: Swift.String { get }
  var id: Swift.UInt { get }
  var progress: Swift.Float? { get set }
  var progressHandler: ((_ progress: Swift.Float, _ failed: Swift.Bool) -> Swift.Void)? { get set }
  var downloadType: BanubaVideoEditorSDK.ContentLocationType { get }
  var lutFileName: Swift.String? { get }
  func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
}
extension BanubaSDKServicing.EffectModel : BanubaVideoEditorSDK.EffectViewModel {
  public var lutFileName: Swift.String? {
    get
  }
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set
  }
  public var progressHandler: ((_ progress: Swift.Float, _ failed: Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var title: Swift.String {
    get
  }
}
extension VideoEditor.VideoEditorFilterModel : BanubaVideoEditorSDK.EffectViewModel {
  public var lutFileName: Swift.String? {
    get
  }
  public var downloadType: BanubaVideoEditorSDK.ContentLocationType {
    get
  }
  public var progress: Swift.Float? {
    get
    set
  }
  public var progressHandler: ((_ progress: Swift.Float, _ failed: Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public func isEqual(to model: BanubaVideoEditorSDK.EffectViewModel) -> Swift.Bool
  public var type: BanubaVideoEditorSDK.EffectType {
    get
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var title: Swift.String {
    get
  }
}
extension BanubaVideoEditorSDK.AudioWriterStatus : Swift.Equatable {}
extension BanubaVideoEditorSDK.AudioWriterStatus : Swift.Hashable {}
extension BanubaVideoEditorSDK.DeviceModel : Swift.Equatable {}
extension BanubaVideoEditorSDK.DeviceModel : Swift.Hashable {}
extension BanubaVideoEditorSDK.DeviceModel : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.CaptureButtonViewMode : Swift.Equatable {}
extension BanubaVideoEditorSDK.CaptureButtonViewMode : Swift.Hashable {}
extension BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType : Swift.Equatable {}
extension BanubaVideoEditorSDK.TrimVideoCompositionEditItem.TrimVideoCompositionEditItemType : Swift.Hashable {}
extension BanubaVideoEditorSDK.HintArrowPosition : Swift.Equatable {}
extension BanubaVideoEditorSDK.HintArrowPosition : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position : Swift.Equatable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.Position : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.Equatable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.Hashable {}
extension BanubaVideoEditorSDK.AdditionalEffectsButtonConfiguration.ButtonType : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.TitlePosition : Swift.Equatable {}
extension BanubaVideoEditorSDK.TitlePosition : Swift.Hashable {}
extension BanubaVideoEditorSDK.DraftsFeatureConfig : Swift.Equatable {}
extension BanubaVideoEditorSDK.DraftsFeatureConfig : Swift.Hashable {}
extension BanubaVideoEditorSDK.DraftsFeatureConfig : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.Equatable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.Hashable {}
extension BanubaVideoEditorSDK.FilterControlButtonConfig.`Type` : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.DraftMenuItemType : Swift.Equatable {}
extension BanubaVideoEditorSDK.DraftMenuItemType : Swift.Hashable {}
extension BanubaVideoEditorSDK.EffectType : Swift.Equatable {}
extension BanubaVideoEditorSDK.EffectType : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoRecordSpeed : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes : Swift.Equatable {}
extension BanubaVideoEditorSDK.FeedbackAlertViewController.ActionTypes : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoTextAligment : Swift.Equatable {}
extension BanubaVideoEditorSDK.VideoTextAligment : Swift.Hashable {}
extension BanubaVideoEditorSDK.VideoTextAligment : Swift.RawRepresentable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.Equatable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.Hashable {}
extension BanubaVideoEditorSDK.ContentLocationType : Swift.RawRepresentable {}
