// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef BANUBASDK_SWIFT_H
#define BANUBASDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import BanubaEffectPlayer;
@import BanubaSDKServicing;
@import BanubaUtilities;
@import CoreGraphics;
@import CoreMedia;
@import CoreVideo;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import OpenGLES;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BanubaSdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif






SWIFT_PROTOCOL("_TtP9BanubaSdk14AudioCapturing_")
@protocol AudioCapturing
- (void)startAudioCapturing;
- (void)stopAudioCapturing;
@end



@class NSURL;
@class PIPSwitchLayoutSetting;
@class PIPPlayerLayoutSetting;
@class PIPCameraLayoutSetting;
@protocol SDKInputServicingDelegate;
@class NSString;

SWIFT_CLASS("_TtC9BanubaSdk18BanubaCameraModule")
@interface BanubaCameraModule : NSObject
@property (nonatomic) BOOL isPIPSessionAlreadySetup;
@property (nonatomic) BOOL isPIPSession;
@property (nonatomic, copy) NSURL * _Nullable pipVideoURL;
@property (nonatomic, strong) PIPSwitchLayoutSetting * _Nullable pipSwitchSetting;
@property (nonatomic, strong) PIPPlayerLayoutSetting * _Nullable pipPlayerSetting;
@property (nonatomic, strong) PIPCameraLayoutSetting * _Nullable pipCameraSetting;
/// Setup the camera if needed
@property (nonatomic) BOOL isCameraEnabled;
@property (nonatomic) BOOL isLoaded;
@property (nonatomic) BOOL allowProcessing;
@property (nonatomic, strong) id <SDKInputServicingDelegate> _Nullable inputDelegate;
+ (void)initializeWithSdkToken:(NSString * _Nonnull)sdkToken videoSize:(CGSize)videoSize videoPreset:(AVCaptureSessionPreset _Nonnull)videoPreset useHEVCCodecIfPossibleForRecorder:(BOOL)useHEVCCodecIfPossibleForRecorder arCloudPath:(NSString * _Nullable)arCloudPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <BNBEffectEventListener>
- (void)onEffectEvent:(NSString * _Nonnull)name params:(NSDictionary<NSString *, NSString *> * _Nonnull)params;
@end


@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <SDKBeautyEffectManaging>
@property (nonatomic) BOOL isBeautificationEnabled;
- (BOOL)toggleBeautification SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP9BanubaSdk24BanubaSdkManagerDelegate_")
@protocol BanubaSdkManagerDelegate
- (void)willPresentWithChangedPixelBuffer:(CVPixelBufferRef _Nullable)changedPixelBuffer;
- (void)willOutputWithPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer;
@end


@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <BanubaSdkManagerDelegate>
- (void)willOutputWithPixelBuffer:(CVPixelBufferRef _Nonnull)pixelBuffer;
- (void)willPresentWithChangedPixelBuffer:(CVPixelBufferRef _Nullable)changedPixelBuffer;
@end

@class ExternalAudioConfiguration;
@class NSValue;

@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <SDKOutputServicing>
@property (nonatomic, readonly) BOOL isRecording;
@property (nonatomic, readonly) BOOL isEnoughDiskSpaceForRecording;
- (void)startVideoCapturingWithFileURL:(NSURL * _Nullable)fileURL progress:(void (^ _Nonnull)(CMTime))progress completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)startVideoCapturingWithFileURL:(NSURL * _Nullable)fileURL startTimeForVideoTexture:(double)startTimeForVideoTexture externalAudioConfiguration:(ExternalAudioConfiguration * _Nullable)externalAudioConfiguration progress:(void (^ _Nonnull)(CMTime))progress didStart:(void (^ _Nullable)(void))didStart periodicProgressTimeInterval:(NSTimeInterval)periodicProgressTimeInterval boundaryTimes:(NSArray<NSValue *> * _Nonnull)boundaryTimes boundaryHandler:(void (^ _Nonnull)(CMTime))boundaryHandler totalDuration:(NSTimeInterval)totalDuration completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)stopVideoCapturingWithCancel:(BOOL)cancel;
@end

@class UIImage;
@class AVURLAsset;

@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <SDKEffectsTextureServicing>
- (void)effectAddImageTextureWithImage:(UIImage * _Nonnull)image;
- (void)effectAddVideoTextureWithAsset:(AVURLAsset * _Nonnull)asset;
- (void)unloadEffectTexture;
@end

@protocol RenderEffect;
@protocol EffectSubtypeModificationsEventListener;

@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <SDKEffectsServicing>
- (void)loadMaskWithName:(NSString * _Nonnull)name;
- (void)unloadMask;
- (void)removeAllFilters;
- (void)applyFilter:(id <RenderEffect> _Nonnull)filter;
- (void)removeFilter:(id <RenderEffect> _Nonnull)filter;
- (void)setEffectSubtypeModificationsEventListener:(id <EffectSubtypeModificationsEventListener> _Nonnull)listener;
- (NSArray<NSString *> * _Nonnull)effectsPathsWithIncludeBeautyEffect:(BOOL)includeBeautyEffect SWIFT_WARN_UNUSED_RESULT;
- (void)effectDidBeginApplying;
- (void)effectDidEndApplying;
- (void)effectDidResetApplying;
- (void)effectDidChangeState;
@end


@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk))
- (void)seekPIPPlayerTo:(NSTimeInterval)time;
- (void)startPIPPlayer;
- (void)stopPIPPlayer;
- (void)setPIPPlayerVolume:(float)volume;
- (void)setupPIPSessionWithVideoURL:(NSURL * _Nonnull)url playerSetting:(PIPPlayerLayoutSetting * _Nonnull)playerSetting cameraSetting:(PIPCameraLayoutSetting * _Nonnull)cameraSetting switchSetting:(PIPSwitchLayoutSetting * _Nonnull)switchSetting;
- (void)startPIPSessionIfNeededWithSetting:(PIPPlayerLayoutSetting * _Nonnull)setting completion:(void (^ _Nullable)(void))completion;
- (void)applyPIPCameraSettingIfNeeded:(PIPCameraLayoutSetting * _Nonnull)setting restoreSession:(BOOL)restoreSession;
- (void)applyPIPPlayerSettingIfNeeded:(PIPPlayerLayoutSetting * _Nonnull)setting restoreSession:(BOOL)restoreSession;
- (void)applyPIPSwitchSettingIfNeeded:(PIPSwitchLayoutSetting * _Nonnull)setting restoreSession:(BOOL)restoreSession;
@end


@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <SDKInputServicing>
@property (nonatomic, readonly) float zoomFactor;
@property (nonatomic, readonly) BOOL isFrontCamera;
@property (nonatomic, readonly) enum CameraModuleSessionType currentCameraSessionType;
- (void)configureFocusSettings:(CGPoint)point useContinuousDetection:(BOOL)useContinuousDetection;
- (void)configureExposureSettings:(CGPoint)point useContinuousDetection:(BOOL)useContinuousDetection;
- (float)setZoomFactor:(float)zoomFactor SWIFT_WARN_UNUSED_RESULT;
- (void)toggleCameraWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)startCamera;
- (void)startAudioCapturing;
- (void)stopAudioCapturing;
- (void)setCameraSessionType:(enum CameraModuleSessionType)type;
- (enum AVCaptureTorchMode)setTorchWithMode:(enum AVCaptureTorchMode)mode SWIFT_WARN_UNUSED_RESULT;
- (enum AVCaptureTorchMode)toggleTorch SWIFT_WARN_UNUSED_RESULT;
@end

@class UIView;

@interface BanubaCameraModule (SWIFT_EXTENSION(BanubaSdk)) <CameraModule>
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull renderQueue;
@property (nonatomic) BOOL autoStart;
@property (nonatomic, readonly) CGSize playerViewSize;
- (void)setMaxFacesWithFacesCount:(int32_t)facesCount;
- (void)setup;
- (void)destroy;
- (void)takeSnapshotWithHandler:(void (^ _Nonnull)(UIImage * _Nullable))handler;
- (void)startWithCompletion:(void (^ _Nonnull)(void))completion;
- (void)stopWithCompletion:(void (^ _Nullable)(void))completion;
- (void)setRenderTargetWithView:(UIView * _Nonnull)view;
- (void)removeRenderTarget;
- (UIView * _Nonnull)getRendererView SWIFT_WARN_UNUSED_RESULT;
- (void)startRenderLoop;
- (void)stopRenderLoop;
@end

@class BNBEffectPlayer;
@class BNBEffectManager;
@class BNBEffect;
@class BNBFeatureParameter;
@protocol InputServicing;
@protocol OutputServicing;
@class RenderTarget;
@class EffectPlayerConfiguration;
@class CAEAGLLayer;
enum EffectPlayerRenderMode : NSInteger;
enum RenderContentMode : NSInteger;

SWIFT_CLASS("_TtC9BanubaSdk16BanubaSdkManager")
@interface BanubaSdkManager : NSObject
@property (nonatomic, weak) id <BanubaSdkManagerDelegate> _Nullable delegate;
/// Access to current instance of BNBEffectPlayer
@property (nonatomic, readonly, strong) BNBEffectPlayer * _Nullable effectPlayer;
/// Face orintation in frame (degrees).
@property (nonatomic) NSInteger faceOrientation;
/// Setup the camera if needed.
@property (nonatomic) BOOL isCameraEnabled;
- (BNBEffectManager * _Nullable)effectManager SWIFT_WARN_UNUSED_RESULT;
/// Enable autorotation mode. Camera orientation and render size should change along with UI orientation
@property (nonatomic) BOOL autoRotationEnabled;
/// \param effectUrl path to effect relative to resource paths passed to <code>initialize</code>.
///
/// \param synchronous block the call until effect is loaded.
///
- (BNBEffect * _Nullable)loadEffect:(NSString * _Nonnull)effectUrl synchronous:(BOOL)synchronous SWIFT_WARN_UNUSED_RESULT;
/// Extra parameters to be passed during on-CPU processing
@property (nonatomic, copy) NSArray<BNBFeatureParameter *> * _Nullable featureParameters;
- (BNBEffect * _Nullable)currentEffect SWIFT_WARN_UNUSED_RESULT;
/// Maximum number of faces to trace simultaneously
- (void)setMaxFaces:(int32_t)maxFaces;
@property (nonatomic, strong) id <InputServicing> _Nonnull input;
@property (nonatomic, readonly, strong) id <OutputServicing> _Nullable output;
@property (nonatomic, strong) RenderTarget * _Nullable renderTarget;
@property (nonatomic, readonly, strong) EffectPlayerConfiguration * _Nullable playerConfiguration;
- (void)setRenderTargetWithLayer:(CAEAGLLayer * _Nonnull)layer renderMode:(enum EffectPlayerRenderMode)renderMode contentMode:(enum RenderContentMode)contentMode;
- (void)setRenderTargetWithLayer:(CAEAGLLayer * _Nonnull)layer contentMode:(enum RenderContentMode)contentMode playerConfiguration:(EffectPlayerConfiguration * _Nullable)playerConfiguration;
- (void)removeRenderTarget;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull renderQueue;
@property (nonatomic) BOOL shouldAutoStartOnEnterForeground;
@property (nonatomic, readonly) BOOL isLoaded;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Intialize common banuba SDK resources. This must be called before <code>BanubaSdkManger</code> instance
/// creation. Counterpart <code>deinitialize</code> exists.
/// \param resourcePath paths to cutom resources folders
///
/// \param clientTokenString client token
///
/// \param logLevel log level
///
+ (void)initializeWithResourcePath:(NSArray<NSString *> * _Nonnull)resourcePath clientTokenString:(NSString * _Nonnull)clientTokenString logLevel:(BNBSeverityLevel)logLevel;
/// Release common Banuba SDK resources
+ (void)deinitialize;
- (void)setupWithConfiguration:(EffectPlayerConfiguration * _Nonnull)configuration;
- (void)destroy;
/// BNBEffectPlayer may crash on certain devices. So, we downscale the input image before processing.
+ (CVPixelBufferRef _Nullable)scaleBeforeProcessing:(CVPixelBufferRef _Nullable)buffer SWIFT_WARN_UNUSED_RESULT;
@end




@interface BanubaSdkManager (SWIFT_EXTENSION(BanubaSdk))
- (void)setFrameDataRecord:(BOOL)isRecord;
@end



@interface BanubaSdkManager (SWIFT_EXTENSION(BanubaSdk)) <BNBCameraPoiListener>
- (void)onCameraPoiChanged:(float)x y:(float)y;
@end


@interface BanubaSdkManager (SWIFT_EXTENSION(BanubaSdk)) <BNBFaceNumberListener>
- (void)onFaceNumberChanged:(int32_t)faceNumber;
@end



SWIFT_PROTOCOL("_TtP9BanubaSdk20InputServiceDelegate_")
@protocol InputServiceDelegate
- (void)pushWithCvBuffer:(CVPixelBufferRef _Nonnull)cvBuffer;
- (void)pushWithCmBuffer:(CMSampleBufferRef _Nonnull)cmBuffer;
@end


@interface BanubaSdkManager (SWIFT_EXTENSION(BanubaSdk)) <InputServiceDelegate>
- (void)pushWithCmBuffer:(CMSampleBufferRef _Nonnull)cmBuffer;
- (void)pushWithCvBuffer:(CVPixelBufferRef _Nonnull)cvBuffer;
@end


@class AppStateObserver;

@interface BanubaSdkManager (SWIFT_EXTENSION(BanubaSdk)) <AppStateObserverDelegate>
- (void)applicationWillResignActive:(AppStateObserver * _Nonnull)appStateObserver;
- (void)applicationDidBecomeActive:(AppStateObserver * _Nonnull)appStateObserver;
- (void)applicationDidEnterBackgroundNotification:(AppStateObserver * _Nonnull)appStateObserver;
- (void)applicationWillEnterForeground:(AppStateObserver * _Nonnull)appStateObserver;
- (void)applicationWillTerminateNotification:(AppStateObserver * _Nonnull)appStateObserver;
@end




@interface BanubaSdkManager (SWIFT_EXTENSION(BanubaSdk)) <BNBFrameDurationListener>
- (void)onRecognizerFrameDurationChanged:(float)instant averaged:(float)averaged;
- (void)onCameraFrameDurationChanged:(float)instant averaged:(float)averaged;
- (void)onRenderFrameDurationChanged:(float)instant averaged:(float)averaged;
@end

@class NSNumber;
@class BNBProcessImageParams;
@class CameraPhotoSettings;
@class WatermarkInfo;

@interface BanubaSdkManager (SWIFT_EXTENSION(BanubaSdk))
- (void)startEffectPlayer;
- (void)stopEffectPlayer;
- (void)destroyEffectPlayer;
/// Image editing mode - renders effect on single frame prepared from image, applies effect on image in full resolution.
/// Workflow to use editing:
/// <ul>
///   <li>
///     Configure effect player with correct render target and render size to match aspect ratio of edited image (could be done with setRenderTarget call), load needed effect.
///     Pay attention that render size could be less than original image size (moreover, bigger resolution could cause performance issues), the only restriction is to preserve aspect ratio.
///   </li>
///   <li>
///     Call startEditingImage. Completion block returns is any face found or not. From that moment image with applied effect is rendered on provided render target.
///   </li>
///   <li>
///     Call captureEditedImage to get edited image with applied effect in fullsize resolution.
///   </li>
///   <li>
///     Call stopEditingImage. After that moment user can switch to other render target and restore previous logic (push frames from camera), if needed.
///   </li>
/// </ul>
- (void)startEditingImage:(UIImage * _Nonnull)image recognizerIterations:(NSNumber * _Nullable)recognizerIterations imageOrientation:(BNBCameraOrientation)imageOrientation requireMirroring:(BOOL)requireMirroring faceOrientation:(NSInteger)faceOrientation fieldOfView:(float)fieldOfView resetEffect:(BOOL)resetEffect processParams:(BNBProcessImageParams * _Nonnull)processParams completion:(void (^ _Nullable)(NSInteger, CGRect))completion;
- (void)captureEditedImageWithImageOrientation:(BNBCameraOrientation)imageOrientation resetEffect:(BOOL)resetEffect completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (void)stopEditingImageWithStartCameraInput:(BOOL)startCameraInput;
- (void)makeCameraPhotoWithCameraSettings:(CameraPhotoSettings * _Nonnull)cameraSettings flipFrontCamera:(BOOL)flipFrontCamera srcImageHandler:(void (^ _Nullable)(CVPixelBufferRef _Nonnull))srcImageHandler completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (void)processImageData:(CVImageBufferRef _Nonnull)inputData orientation:(BNBCameraOrientation)orientation faceOrientation:(NSInteger)faceOrientation fieldOfView:(float)fieldOfView isMirrored:(BOOL)isMirrored completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (void)processImageData:(UIImage * _Nonnull)imputImage orientation:(BNBCameraOrientation)orientation fieldOfView:(float)fieldOfView isMirrored:(BOOL)isMirrored params:(BNBProcessImageParams * _Nonnull)params completion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (void)configureWatermark:(WatermarkInfo * _Nonnull)watermarkInfo;
- (void)removeWatermark;
- (void)startVideoProcessingWithWidth:(NSUInteger)width height:(NSUInteger)height orientation:(BNBCameraOrientation)orientation resetEffect:(BOOL)resetEffect;
- (void)stopVideoProcessingWithResetEffect:(BOOL)resetEffect;
- (void)processVideoFrameFrom:(CVPixelBufferRef _Nonnull)from to:(CVPixelBufferRef _Nonnull)to timeNs:(int64_t)timeNs iterations:(NSNumber * _Nullable)iterations cameraOrientation:(BNBCameraOrientation)cameraOrientation requireMirroring:(BOOL)requireMirroring faceOrientation:(NSInteger)faceOrientation fieldOfView:(float)fieldOfView processImageParams:(BNBProcessImageParams * _Nonnull)processImageParams;
@property (nonatomic, readonly) BNBCameraOrientation imageOrientationForCameraPhoto;
@end



SWIFT_CLASS("_TtC9BanubaSdk19CameraPhotoSettings")
@interface CameraPhotoSettings : NSObject
@property (nonatomic, readonly) BOOL useStabilization;
@property (nonatomic, readonly) enum AVCaptureFlashMode flashMode;
/// CameraPhotoSettings constructor
/// \param useStabilization setup use stabilization
///
/// \param flashMode setup  flash mode
///
- (nonnull instancetype)initWithUseStabilization:(BOOL)useStabilization flashMode:(enum AVCaptureFlashMode)flashMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum CameraSessionType : NSInteger;
@class AVCaptureVideoDataOutput;
@class BNBFrameData;

SWIFT_PROTOCOL("_TtP9BanubaSdk15CameraServicing_")
@protocol CameraServicing
@property (nonatomic, strong) id <InputServiceDelegate> _Nullable delegate;
@property (nonatomic, readonly) BOOL isFrontCamera;
@property (nonatomic, readonly) BOOL isPhotoCameraSession;
@property (nonatomic, readonly) BOOL isCameraCapturing;
@property (nonatomic, readonly) enum CameraSessionType currentCameraSessionType;
@property (nonatomic, readonly) CGPoint exposurePointOfInterest;
@property (nonatomic, readonly) BOOL useARKit;
@property (nonatomic) BOOL flipCamera;
@property (nonatomic, readonly, strong) AVCaptureVideoDataOutput * _Nullable cameraVideoOutput;
- (void)startCamera;
- (void)stopCamera;
- (void)initializeCameraInput;
- (void)releaseAudioCaptureSession;
- (void)setCameraSessionType:(enum CameraSessionType)type;
- (void)setCameraSessionType:(enum CameraSessionType)type completion:(void (^ _Nonnull)(void))completion;
- (void)setCameraSessionType:(enum CameraSessionType)type zoomFactor:(float)zoomFactor completion:(void (^ _Nonnull)(void))completion;
- (void)configureExposureSettings:(CGPoint)point useContinuousDetection:(BOOL)useContinuousDetection;
- (void)configureFocusSettings:(CGPoint)point useContinuousDetection:(BOOL)useContinuousDetection;
- (enum AVCaptureTorchMode)setTorchWithMode:(enum AVCaptureTorchMode)mode SWIFT_WARN_UNUSED_RESULT;
- (enum AVCaptureTorchMode)toggleTorch SWIFT_WARN_UNUSED_RESULT;
- (void)initiatePhotoCaptureWithCameraSettings:(CameraPhotoSettings * _Nonnull)cameraSettings completion:(void (^ _Nonnull)(CVImageBufferRef _Nullable, BNBFrameData * _Nullable))completion;
- (void)switchCameraTo:(enum CameraSessionType)type completion:(void (^ _Nonnull)(void))completion;
- (void)restoreCurrentCameraSessionSettingsWithCompletion:(void (^ _Nullable)(void))completion;
- (void)setMaxFaces:(NSInteger)maxFaces;
@end

typedef SWIFT_ENUM(NSInteger, CameraSessionType, open) {
  CameraSessionTypeFrontCameraVideoSession = 0,
  CameraSessionTypeBackCameraVideoSession = 1,
  CameraSessionTypeFrontCameraPhotoSession = 2,
  CameraSessionTypeBackCameraPhotoSession = 3,
};


SWIFT_PROTOCOL("_TtP9BanubaSdk14CameraZoomable_")
@protocol CameraZoomable
@property (nonatomic, readonly) float currentFieldOfView;
@property (nonatomic, readonly) BOOL isZoomFactorAdjustable;
@property (nonatomic, readonly) float minZoomFactor;
@property (nonatomic, readonly) float maxZoomFactor;
@property (nonatomic, readonly) float zoomFactor;
- (float)setZoomFactor:(float)zoomFactor SWIFT_WARN_UNUSED_RESULT;
@end


@class NSNotificationCenter;

SWIFT_CLASS("_TtC9BanubaSdk25EffectPlayerConfiguration")
@interface EffectPlayerConfiguration : NSObject
@property (nonatomic, readonly) enum CameraSessionType cameraMode;
@property (nonatomic) enum RenderContentMode renderContentMode;
@property (nonatomic) CGSize renderSize;
/// Preset for quality of photo or video and audio output.
@property (nonatomic) AVCaptureSessionPreset _Nonnull captureSessionPreset;
@property (nonatomic) NSInteger preferredRenderFrameRate;
@property (nonatomic) BOOL shouldAutoStartOnEnterForeground;
@property (nonatomic) BOOL isMirrored;
@property (nonatomic) BOOL flipVertically;
@property (nonatomic) BOOL delayedCameraInitialization;
@property (nonatomic) BNBCameraOrientation orientation;
@property (nonatomic, strong) NSNotificationCenter * _Nonnull notificationCenter;
@property (nonatomic) BOOL useARKitWhenAvailable;
@property (nonatomic) double fpsLimit;
- (nonnull instancetype)init;
/// CameraLutStage constructor
/// \param renderMode effect player render mode
///
/// \param renderContentMode render content mode
///
/// \param orientation camera orientation
///
/// \param preferredRenderFrameRate preferred render frame rate
///
/// \param shouldAutoStartOnEnterForeground should auto start on enter foreground
///
/// \param isMirrored camera is mirrored
///
/// \param useARKitWhenAvailable use ARKit when available
///
/// \param fpsLimit setup fps limit
///
/// \param delayedCameraInitialization delayed сamera initialization
///
/// \param notificationCenter setup notification center
///
- (nonnull instancetype)initWithRenderMode:(enum EffectPlayerRenderMode)renderMode renderContentMode:(enum RenderContentMode)renderContentMode orientation:(BNBCameraOrientation)orientation preferredRenderFrameRate:(NSInteger)preferredRenderFrameRate shouldAutoStartOnEnterForeground:(BOOL)shouldAutoStartOnEnterForeground isMirrored:(BOOL)isMirrored useARKitWhenAvailable:(BOOL)useARKitWhenAvailable fpsLimit:(double)fpsLimit delayedCameraInitialization:(BOOL)delayedCameraInitialization notificationCenter:(NSNotificationCenter * _Nonnull)notificationCenter;
/// CameraLutStage constructor
/// \param cameraMode camera mode
///
/// \param renderContentMode render content mode
///
/// \param renderSize setup render size
///
/// \param captureSessionPreset capture session preset
///
/// \param orientation camera orientation
///
/// \param preferredRenderFrameRate preferred render frame rate
///
/// \param shouldAutoStartOnEnterForeground should auto start on enter foreground
///
/// \param isMirrored camera is mirrored
///
/// \param flipVertically setup flip vertically
///
/// \param useARKitWhenAvailable use ARKit when available
///
/// \param fpsLimit setup fps limit
///
/// \param delayedCameraInitialization delayed сamera initialization
///
/// \param notificationCenter setup notification center
///
- (nonnull instancetype)initWithCameraMode:(enum CameraSessionType)cameraMode renderContentMode:(enum RenderContentMode)renderContentMode renderSize:(CGSize)renderSize captureSessionPreset:(AVCaptureSessionPreset _Nonnull)captureSessionPreset orientation:(BNBCameraOrientation)orientation preferredRenderFrameRate:(NSInteger)preferredRenderFrameRate shouldAutoStartOnEnterForeground:(BOOL)shouldAutoStartOnEnterForeground isMirrored:(BOOL)isMirrored flipVertically:(BOOL)flipVertically useARKitWhenAvailable:(BOOL)useARKitWhenAvailable fpsLimit:(double)fpsLimit delayedCameraInitialization:(BOOL)delayedCameraInitialization notificationCenter:(NSNotificationCenter * _Nonnull)notificationCenter OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtCC9BanubaSdk25EffectPlayerConfiguration8Defaults")
@interface Defaults : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AVCaptureSessionPreset _Nonnull videoSessionPreset;)
+ (AVCaptureSessionPreset _Nonnull)videoSessionPreset SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AVCaptureSessionPreset _Nonnull photoSessionPreset;)
+ (AVCaptureSessionPreset _Nonnull)photoSessionPreset SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGSize photoRenderSize;)
+ (CGSize)photoRenderSize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGSize videoRenderSize;)
+ (CGSize)videoRenderSize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultFrameRate;)
+ (NSInteger)defaultFrameRate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, EffectPlayerRenderMode, open) {
  EffectPlayerRenderModePhoto = 0,
  EffectPlayerRenderModeVideo = 1,
};

@class NSCoder;
@class UITouch;
@class UIEvent;
@class UITapGestureRecognizer;
@class UIPinchGestureRecognizer;
@class UIRotationGestureRecognizer;
@class UISwipeGestureRecognizer;

SWIFT_CLASS("_TtC9BanubaSdk16EffectPlayerView")
@interface EffectPlayerView : UIView
@property (nonatomic, strong) BNBEffectPlayer * _Nullable effectPlayer;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)onLongTapGestureWithGesture:(UITapGestureRecognizer * _Nonnull)gesture;
- (void)onDoubleTapGestureWithGesture:(UITapGestureRecognizer * _Nonnull)gesture;
- (void)onScaleGestureWithGesture:(UIPinchGestureRecognizer * _Nonnull)gesture;
- (void)onRotationGestureWithGesture:(UIRotationGestureRecognizer * _Nonnull)gesture;
- (void)onSwipeGestureWithGesture:(UISwipeGestureRecognizer * _Nonnull)gesture;
@end



SWIFT_PROTOCOL("_TtP9BanubaSdk14InputServicing_")
@protocol InputServicing <AudioCapturing, CameraServicing, CameraZoomable>
@end


SWIFT_CLASS("_TtC9BanubaSdk25MaskPostprocessingService")
@interface MaskPostprocessingService : NSObject
/// MaskPostprocessingService constructor
/// \param renderSize setup render size
///
- (nonnull instancetype)initWithRenderSize:(CGSize)renderSize OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MaskPostprocessingService (SWIFT_EXTENSION(BanubaSdk)) <SDKMaskPostprocessServicing>
- (void)postprocessProcessVideoFrame:(CVPixelBufferRef _Nonnull)from to:(CVPixelBufferRef _Nonnull)to time:(CMTime)time;
- (void)postprocessSurfaceCreatedWith:(CGSize)size;
- (void)postprocessSetEffectSize:(CGSize)size;
- (void)postprocessLoadEffectWithPath:(NSString * _Nonnull)path;
@end


SWIFT_CLASS("_TtC9BanubaSdk19OutputConfiguration")
@interface OutputConfiguration : NSObject
@property (nonatomic, readonly) BOOL applyWatermark;
@property (nonatomic, readonly) BOOL adjustDeviceOrientation;
@property (nonatomic, readonly) BOOL mirrorFrontCamera;
@property (nonatomic, readonly) BOOL useHEVCCodecIfPossible;
- (nonnull instancetype)initWithApplyWatermark:(BOOL)applyWatermark adjustDeviceOrientation:(BOOL)adjustDeviceOrientation mirrorFrontCamera:(BOOL)mirrorFrontCamera useHEVCCodecIfPossible:(BOOL)useHEVCCodecIfPossible OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OutputConfiguration * _Nonnull defaultConfiguration;)
+ (OutputConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP9BanubaSdk15OutputServicing_")
@protocol OutputServicing
- (void)configureWatermark:(WatermarkInfo * _Nonnull)watermarkInfo;
- (void)takeSnapshotWithHandler:(void (^ _Nonnull)(UIImage * _Nullable))handler;
- (void)takeSnapshotWithConfiguration:(OutputConfiguration * _Nonnull)configuration handler:(void (^ _Nonnull)(UIImage * _Nullable))handler;
- (void)removeWatermark;
- (void)startVideoCapturingWithFileURL:(NSURL * _Nullable)fileURL completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)startVideoCapturingWithFileURL:(NSURL * _Nullable)fileURL configuration:(OutputConfiguration * _Nonnull)configuration completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)startVideoCapturingWithFileURL:(NSURL * _Nullable)fileURL progress:(void (^ _Nullable)(CMTime))progress didStart:(void (^ _Nullable)(void))didStart periodicProgressTimeInterval:(NSTimeInterval)periodicProgressTimeInterval boundaryTimes:(NSArray<NSValue *> * _Nullable)boundaryTimes boundaryHandler:(void (^ _Nullable)(CMTime))boundaryHandler totalDuration:(NSTimeInterval)totalDuration completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)startVideoCapturingWithFileURL:(NSURL * _Nullable)fileURL externalAudioConfiguration:(ExternalAudioConfiguration * _Nullable)externalAudioConfiguration progress:(void (^ _Nullable)(CMTime))progress didStart:(void (^ _Nullable)(void))didStart periodicProgressTimeInterval:(NSTimeInterval)periodicProgressTimeInterval boundaryTimes:(NSArray<NSValue *> * _Nullable)boundaryTimes boundaryHandler:(void (^ _Nullable)(CMTime))boundaryHandler totalDuration:(NSTimeInterval)totalDuration configuration:(OutputConfiguration * _Nonnull)configuration completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (void)stopVideoCapturingWithCancel:(BOOL)cancel;
- (void)startForwardingFramesWithHandler:(void (^ _Nonnull)(CVPixelBufferRef _Nonnull))handler;
- (void)stopForwardingFrames;
- (void)reset;
- (BOOL)hasDiskCapacityForRecording SWIFT_WARN_UNUSED_RESULT;
- (void)startMuteEffectSoundIfNeeded;
- (void)stopMuteEffectSound;
@property (nonatomic, readonly) BOOL isRecording;
@property (nonatomic) CGSize videoSize;
@property (nonatomic) NSInteger cropOffsetY;
@end


SWIFT_CLASS("_TtC9BanubaSdk14PIPShapeDrawer")
@interface PIPShapeDrawer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9BanubaSdk9PIPPlayer")
@interface PIPPlayer : PIPShapeDrawer
@end




/// Options how to resize the result of effect player to display it on a target layer.
typedef SWIFT_ENUM(NSInteger, RenderContentMode, open) {
/// Fits the content into a target layer by keeping its aspect ratio.
  RenderContentModeResizeAspect = 0,
/// Fills a target layer with the content and maintains content’s aspect ratio.
  RenderContentModeResizeAspectFill = 1,
/// Makes the content the same size as a target layer by changing content’s aspect ratio.
  RenderContentModeResize = 2,
};

@class OutputSettings;

SWIFT_CLASS("_TtC9BanubaSdk12RenderTarget")
@interface RenderTarget : PIPShapeDrawer
- (CVPixelBufferRef _Nullable)makeVideoPixelBuffer SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)makeSnapshotWithSettings:(OutputSettings * _Nonnull)settings watermarkPixelBuffer:(CVPixelBufferRef _Nullable)watermarkPixelBuffer SWIFT_WARN_UNUSED_RESULT;
- (void)activate;
- (void)clearRenderColorWithR:(GLclampf)r g:(GLclampf)g b:(GLclampf)b a:(GLclampf)a;
- (void)presentRenderbuffer:(void (^ _Nullable)(CVPixelBufferRef _Nullable))willPresentHandler;
@end

@class NSData;

@interface UIImage (SWIFT_EXTENSION(BanubaSdk))
/// This method doesn’t use copying data, since it can heavily affect performance and memory usage
/// (for high quality photos like 3024x4032 each copy of data has size ~30 Mb, and on slower devices making copy can take up to 0.2 sec).
/// Common idea - we have NSData object which contains raw data, used for UIImage creation. Since we don’t copy underlying data, we need to take control on
/// lifetime of NSData object, otherwise internal content of UIImage will be destroyed.
/// So, we manually transform NSData object into unmanaged pointer and increase its retain count by passRetained call, and in special callback of CGDataProvider,
/// which will be called when UIImage is no longer needed, we release that unmanaged pointer by takeRetainedValue call, to prevent memory leaks.
- (nullable instancetype)initWithRgbaDataNoCopy:(NSData * _Nonnull)rgbaDataNoCopy width:(NSInteger)width height:(NSInteger)height;
- (CVPixelBufferRef _Nullable)makeBgraPixelBuffer SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM(NSInteger, WatermarkCornerPosition, open) {
  WatermarkCornerPositionTopLeft = 0,
  WatermarkCornerPositionTopRight = 1,
  WatermarkCornerPositionBottomRight = 2,
  WatermarkCornerPositionBottomLeft = 3,
};


SWIFT_CLASS("_TtC9BanubaSdk21WatermarkDrawSettings")
@interface WatermarkDrawSettings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Watermark placement coulb be configured by normalized position (0..1 for x, y based on final pixel buffer size),
/// or by specifying corner and fixed pixel offset from it.
/// Size could be configured by specifying fixed pixel width, or by normalized value (0..1 from final pixel buffer width),
/// height is always calculated using aspect ratio of provided watermark image.
SWIFT_CLASS("_TtC9BanubaSdk13WatermarkInfo")
@interface WatermarkInfo : NSObject
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image corner:(enum WatermarkCornerPosition)corner offset:(CGPoint)offset targetWidth:(CGFloat)targetWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image corner:(enum WatermarkCornerPosition)corner offset:(CGPoint)offset targetNormalizedWidth:(CGFloat)targetNormalizedWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image normalizedPosition:(CGPoint)normalizedPosition targetWidth:(CGFloat)targetWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image normalizedPosition:(CGPoint)normalizedPosition targetNormalizedWidth:(CGFloat)targetNormalizedWidth OBJC_DESIGNATED_INITIALIZER;
- (WatermarkDrawSettings * _Nonnull)drawSettingsWithBoundsSize:(CGSize)boundsSize outputSettings:(OutputSettings * _Nonnull)outputSettings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
