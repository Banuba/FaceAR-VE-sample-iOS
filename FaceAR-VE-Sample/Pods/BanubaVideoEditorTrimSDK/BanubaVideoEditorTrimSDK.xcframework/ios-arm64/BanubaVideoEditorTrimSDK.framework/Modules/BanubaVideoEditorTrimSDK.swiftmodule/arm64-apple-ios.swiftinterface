// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name BanubaVideoEditorTrimSDK
import AVFoundation
import AVKit
import BanubaUtilities
@_exported import BanubaVideoEditorTrimSDK
import CoreMedia
import Foundation
import Swift
import UIKit
import VEEffectsSDK
import VideoEditor
import _Concurrency
public struct VideoDurationDefaults {
  public static var shared: BanubaVideoEditorTrimSDK.VideoEditorDurationConfig
}
public struct VideoImportDefaults {
  public static let maximumNumberOfVideos: Swift.Int
}
public struct VideoAspectRatio {
  public static var minFillAspectRatio: CoreGraphics.CGFloat {
    get
  }
  public static var maxFillAspectRatio: CoreGraphics.CGFloat {
    get
  }
  public static var fillAspectRatioRange: Swift.ClosedRange<CoreGraphics.CGFloat> {
    get
  }
}
public struct VideoEditorDurationConfig {
  public var maximumVideoDuration: Foundation.TimeInterval
  public var minimumDurationFromCamera: Foundation.TimeInterval
  public var minimumDurationFromGallery: Foundation.TimeInterval
  public var minimumVideoDuration: Foundation.TimeInterval
  public var minimumTrimmedPartDuration: Foundation.TimeInterval
  public var slideshowDuration: Foundation.TimeInterval
  public init(maximumVideoDuration: Foundation.TimeInterval, minimumDurationFromCamera: Foundation.TimeInterval, minimumDurationFromGallery: Foundation.TimeInterval, minimumVideoDuration: Foundation.TimeInterval, minimumTrimmedPartDuration: Foundation.TimeInterval, slideshowDuration: Foundation.TimeInterval)
  public func isValidMaxDurationWithTolerance(_ duration: Foundation.TimeInterval) -> Swift.Bool
  public func validateTrimRecorderVideoSupporting(supportsTrimRecordedVideo: Swift.Bool)
}
public class TrimMusicFitter {
  final public let editableAsset: VideoEditor.VideoEditorAsset
  final public let mediaTrack: BanubaUtilities.MediaTrack
  public var mediaTracks: [BanubaUtilities.MediaTrack] {
    get
  }
  public struct AudioSequenceItem {
  }
  public init?(editableAsset: VideoEditor.VideoEditorAsset, mediaTrack: BanubaUtilities.MediaTrack?)
  public func reloadMusic()
  public func duplicateMusicURL(_ url: Foundation.URL) -> Foundation.URL
  public func applyMusic(forTrackInfo trackInfo: VideoEditor.VideoEditorAssetTrackInfo, withTimeRangeInGlobal timeRangeInGlobal: CoreMedia.CMTimeRange, trimTimeRange: CoreMedia.CMTimeRange, inAsset asset: VideoEditor.VideoEditorAsset)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VideoEditorTrackRotationCalculator {
  public static func getTrackRotation(_ track: VideoEditor.VideoEditorAssetTrackInfo) -> VideoEditor.AssetRotation
  @objc deinit
}
public protocol VideoMetadataStorageDelegate : AnyObject {
  func videoMetadataStorageDidStartStoring(_ videoMetadataStorage: BanubaVideoEditorTrimSDK.VideoMetadataStoring)
}
public protocol VideoMetadataStoring {
  var videoSequence: VideoEditor.VideoSequence? { get }
  var videoEditorMetadata: BanubaUtilities.VideoEditorMetadata? { get }
  var videoMetadata: BanubaUtilities.VideoMetadata? { get }
  var videoEditorTrimMetadata: BanubaUtilities.VideoEditorTrimMetadata? { get }
  var audioTracks: [BanubaUtilities.AudioTrackAdoptable]? { get }
  var videoCoverMetadata: BanubaUtilities.VideoCoverMetadata? { get }
  var musicEditorMetadata: BanubaUtilities.MusicEditorMetadata? { get }
  var cameraSessionMetadata: BanubaUtilities.CameraSessionMetadata? { get }
  var delegate: BanubaVideoEditorTrimSDK.VideoMetadataStorageDelegate? { get set }
  func update(metadata: BanubaUtilities.CameraSessionMetadata)
  func update(metadata: [BanubaUtilities.AudioTrackAdoptable], trackVolumes: [Swift.Int32 : Swift.Float], videoVolume: Swift.Float)
  func update(metadata: BanubaUtilities.VideoEditorTrimMetadata)
  func update(metadata: BanubaUtilities.VideoEditorMetadata)
  func update(metadata: BanubaUtilities.VideoMetadata)
  func update(metadata: BanubaUtilities.VideoCoverMetadata)
  func reset()
  func setupCurrentSequence(_ videoSequence: VideoEditor.VideoSequence)
  func videoMetadata(forVideoSequence: VideoEditor.VideoSequence?) -> BanubaUtilities.VideoMetadata?
  func videoCoverMetadata(forVideoSequence: VideoEditor.VideoSequence?) -> BanubaUtilities.VideoCoverMetadata?
  func replaceMetadata(ofVideoSequence: VideoEditor.VideoSequence, withVideoSequence: VideoEditor.VideoSequence)
  func duplicateMetadata(ofVideoSequence: VideoEditor.VideoSequence, toVideoSequence: VideoEditor.VideoSequence)
}
public class VideoMetadataStorage : BanubaVideoEditorTrimSDK.VideoMetadataStoring {
  weak public var delegate: BanubaVideoEditorTrimSDK.VideoMetadataStorageDelegate?
  public var videoSequence: VideoEditor.VideoSequence? {
    get
  }
  public var videoMetadata: BanubaUtilities.VideoMetadata? {
    get
  }
  public var videoEditorMetadata: BanubaUtilities.VideoEditorMetadata? {
    get
  }
  public var videoEditorTrimMetadata: BanubaUtilities.VideoEditorTrimMetadata? {
    get
  }
  public var audioTracks: [BanubaUtilities.AudioTrackAdoptable]? {
    get
  }
  public var videoCoverMetadata: BanubaUtilities.VideoCoverMetadata? {
    get
  }
  public var musicEditorMetadata: BanubaUtilities.MusicEditorMetadata? {
    get
  }
  public var cameraSessionMetadata: BanubaUtilities.CameraSessionMetadata? {
    get
  }
  required public init(videoSequence: VideoEditor.VideoSequence? = nil, fileManager: Foundation.FileManager = FileManager.default)
  @objc deinit
  public func update(metadata: [BanubaUtilities.AudioTrackAdoptable], trackVolumes: [Swift.Int32 : Swift.Float], videoVolume: Swift.Float)
  public func update(metadata: BanubaUtilities.CameraSessionMetadata)
  public func update(metadata: BanubaUtilities.VideoEditorTrimMetadata)
  public func update(metadata: BanubaUtilities.VideoMetadata)
  public func update(metadata: BanubaUtilities.VideoEditorMetadata)
  public func update(metadata: BanubaUtilities.VideoCoverMetadata)
  public func reset()
  public func setupCurrentSequence(_ videoSequence: VideoEditor.VideoSequence)
  public func videoMetadata(forVideoSequence videoSequence: VideoEditor.VideoSequence?) -> BanubaUtilities.VideoMetadata?
  public func videoCoverMetadata(forVideoSequence videoSequence: VideoEditor.VideoSequence?) -> BanubaUtilities.VideoCoverMetadata?
  public func replaceMetadata(ofVideoSequence destinationSequence: VideoEditor.VideoSequence, withVideoSequence sourceSequence: VideoEditor.VideoSequence)
  public func duplicateMetadata(ofVideoSequence sourceSequence: VideoEditor.VideoSequence, toVideoSequence destinationSequence: VideoEditor.VideoSequence)
}
public enum TimeResult {
  case longerThenRequired
  case shorterThenRequired
  case enough
  public static func == (a: BanubaVideoEditorTrimSDK.TimeResult, b: BanubaVideoEditorTrimSDK.TimeResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ImportVideoTimeBehaviour {
  final public let minTotalTime: CoreMedia.CMTime
  final public let maxTotalTime: CoreMedia.CMTime
  final public let minPartTime: CoreMedia.CMTime
  final public let maxPartTime: CoreMedia.CMTime
  final public let maxPartsCount: Swift.Int
  public init(minTotalTime: Foundation.TimeInterval, maxTotalTime: Foundation.TimeInterval, minPartTime: Foundation.TimeInterval, maxPartTime: Foundation.TimeInterval, maxPartsCount: Swift.Int)
  public func calculateFirstTrimTimeRanges(for parts: [VideoEditor.VideoEditorAssetTrackInfo])
  public func alignTrimTimeRanges(for parts: [VideoEditor.VideoEditorAssetTrackInfo])
  public func getMaximumTrimDuration(for part: VideoEditor.VideoEditorAssetTrackInfo, allParts: [VideoEditor.VideoEditorAssetTrackInfo]) -> CoreMedia.CMTime
  public func canBeAdded(partTime: CoreMedia.CMTime, to parts: [CoreMedia.CMTime]) -> Swift.Bool
  public func isTotalDurationEnough(parts: [VideoEditor.VideoEditorAssetTrackInfo]) -> BanubaVideoEditorTrimSDK.TimeResult
  @objc deinit
}
public protocol SequencesServicing {
  var aspectRatio: BanubaUtilities.AspectRatio { get }
  var currentSequence: VideoEditor.VideoSequence? { get }
  var lastModifiedSequence: VideoEditor.VideoSequence? { get }
  var sequences: [VideoEditor.VideoSequence] { get }
  var draftedSequences: [VideoEditor.VideoSequence] { get }
  func createNewSequence(withMusicTrack musicTrack: BanubaUtilities.MediaTrack?, isSlideShow: Swift.Bool, editingStep: BanubaUtilities.VideoSequenceEditingStep) -> VideoEditor.VideoSequence
  func cancelAndRemoveCurrentSequence()
  @discardableResult
  func removeSequence(_ videoSequence: VideoEditor.VideoSequence) -> Swift.Bool
  @discardableResult
  func duplicateSequence(_ videoSequence: VideoEditor.VideoSequence, withSameName: Swift.Bool) -> (VideoEditor.VideoSequence, BanubaUtilities.VideoMetadata)
  func replaceSequenceWithId(_ sequenceId: Swift.String, withVideoSequence: VideoEditor.VideoSequence)
  func setupWithVideoSequence(_ videoSequence: VideoEditor.VideoSequence)
  func setEditingStep(_ editingStep: BanubaUtilities.VideoSequenceEditingStep, forSequence videoSequence: VideoEditor.VideoSequence)
}
extension BanubaVideoEditorTrimSDK.SequencesServicing {
  public func createNewSequence(withMusicTrack musicTrack: BanubaUtilities.MediaTrack? = nil, isSlideShow: Swift.Bool = false, editingStep: BanubaUtilities.VideoSequenceEditingStep = .camera) -> VideoEditor.VideoSequence
}
public class SequencesService : BanubaVideoEditorTrimSDK.SequencesServicing {
  final public let aspectRatio: BanubaUtilities.AspectRatio
  public var currentSequence: VideoEditor.VideoSequence? {
    get
  }
  public var lastModifiedSequence: VideoEditor.VideoSequence? {
    get
  }
  public var sequences: [VideoEditor.VideoSequence] {
    get
  }
  public var draftedSequences: [VideoEditor.VideoSequence] {
    get
  }
  final public let videoSequenceService: VideoEditor.VideoSequenceServicing
  final public let metadataStorage: BanubaVideoEditorTrimSDK.VideoMetadataStoring
  public init(videoSequenceService: VideoEditor.VideoSequenceServicing, metadataStorage: BanubaVideoEditorTrimSDK.VideoMetadataStoring, aspectRatio: BanubaUtilities.AspectRatio)
  public func createNewSequence(withMusicTrack musicTrack: BanubaUtilities.MediaTrack?, isSlideShow: Swift.Bool, editingStep: BanubaUtilities.VideoSequenceEditingStep) -> VideoEditor.VideoSequence
  public func cancelAndRemoveCurrentSequence()
  public func removeSequence(_ videoSequence: VideoEditor.VideoSequence) -> Swift.Bool
  public func duplicateSequence(_ videoSequence: VideoEditor.VideoSequence, withSameName useSameName: Swift.Bool) -> (VideoEditor.VideoSequence, BanubaUtilities.VideoMetadata)
  public func replaceSequenceWithId(_ sequenceId: Swift.String, withVideoSequence videoSequence: VideoEditor.VideoSequence)
  public func setupWithVideoSequence(_ videoSequence: VideoEditor.VideoSequence)
  public func setEditingStep(_ editingStep: BanubaUtilities.VideoSequenceEditingStep, forSequence videoSequence: VideoEditor.VideoSequence)
  public func generateNameForSequence(isDraftSequence: Swift.Bool = false) -> Swift.String
  @objc deinit
}
public struct SplitVideoTimeValidator {
  public let minVideoPartDuration: Foundation.TimeInterval
  public init(minVideoPartDuration: Foundation.TimeInterval)
  public func canSplitTrackWithTimeRangeInGlobal(_ timeRangeInGlobal: CoreMedia.CMTimeRange, atCompositionTime time: CoreMedia.CMTime) -> Swift.Bool
}
public protocol AspectsServicing {
  func setupWithVideoResolution(_ videoResolution: BanubaUtilities.VideoResolution)
  func getAspectedVideoSize(forVideoEditorAsset videoEditorAsset: VideoEditor.VideoEditorAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> CoreGraphics.CGSize
  func getAspectRatio(forVideoEditorAsset asset: VideoEditor.VideoEditorAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> Swift.Double
}
public class AspectsService : BanubaVideoEditorTrimSDK.AspectsServicing {
  public var videoResolution: BanubaUtilities.VideoResolution
  public init()
  public func setupWithVideoResolution(_ videoResolution: BanubaUtilities.VideoResolution)
  public func getAspectedVideoSize(forVideoEditorAsset asset: VideoEditor.VideoEditorAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> CoreGraphics.CGSize
  public func getAspectRatio(forVideoEditorAsset asset: VideoEditor.VideoEditorAsset, withAspectRatio aspectRatio: BanubaUtilities.AspectRatio) -> Swift.Double
  @objc deinit
}
public protocol TrimSDKServicing : VEEffectsSDK.TransformEffectsSDKServicing, VideoEditor.VideoEditorSDKServicing {
  var sequencesService: BanubaVideoEditorTrimSDK.SequencesServicing { get }
  var aspectsService: BanubaVideoEditorTrimSDK.AspectsServicing { get }
  var metadataService: BanubaVideoEditorTrimSDK.VideoMetadataStoring { get set }
}
public enum TrimServiceError : Swift.Error {
  case tooShortVideo
  case tooLongVideo
  case undefined
  public static func == (a: BanubaVideoEditorTrimSDK.TrimServiceError, b: BanubaVideoEditorTrimSDK.TrimServiceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias OriginalSplittedTracks = (VideoEditor.VideoEditorAssetTrackInfo, VideoEditor.VideoEditorAssetTrackInfo)
public class TrimService {
  final public let sdk: BanubaVideoEditorTrimSDK.TrimSDKServicing
  final public let videoSequence: VideoEditor.VideoSequence
  public var initialVideoAsset: VideoEditor.VideoEditorAsset?
  public var initialDraftTrimedMetadata: BanubaUtilities.VideoEditorTrimMetadata?
  final public let videoResolution: BanubaUtilities.VideoResolutionConfiguration
  final public let editableAsset: VideoEditor.VideoEditorAsset
  final public let timeBehaviour: BanubaVideoEditorTrimSDK.ImportVideoTimeBehaviour
  public var addedPartsCount: Swift.Int {
    get
  }
  final public let isVideoFitsAspect: Swift.Bool
  public init(sdk: BanubaVideoEditorTrimSDK.TrimSDKServicing, isVideoFitsAspect: Swift.Bool, videoSequence: VideoEditor.VideoSequence, videoResolution: BanubaUtilities.VideoResolutionConfiguration)
  @objc deinit
}
extension BanubaVideoEditorTrimSDK.TrimService {
  public func saveMusicMetadata()
  public func discardAll()
  public func restoreTrimMetadata()
  public func exportMusic()
}
extension BanubaVideoEditorTrimSDK.TrimService {
  public func adjustPlayer(aspectRatio: BanubaUtilities.AspectRatio)
  public func adjustPlayerForSignleTrackInfo(_ trackInfo: VideoEditor.VideoEditorAssetTrackInfo, aspectRatio: BanubaUtilities.AspectRatio, trimTimeRange: CoreMedia.CMTimeRange)
}
extension BanubaVideoEditorTrimSDK.TrimService {
  public func tracks() -> [VideoEditor.VideoEditorAssetTrackInfo]
  public func addTracks(_ tracks: [VideoEditor.VideoEditorAssetTrackInfo], atIndex index: Swift.Int)
  public func removeTrack(_ track: VideoEditor.VideoEditorAssetTrackInfo)
  public func removeTrack(at index: Swift.Int)
  public func moveTrack(fromIndex: Swift.Int, toIndex: Swift.Int)
  public func track(at index: Swift.Int) -> VideoEditor.VideoEditorAssetTrackInfo?
  public func index(of trackInfo: VideoEditor.VideoEditorAssetTrackInfo) -> Swift.Int?
  public func splitTrack(_ track: VideoEditor.VideoEditorAssetTrackInfo, atTime time: CoreMedia.CMTime) -> BanubaVideoEditorTrimSDK.OriginalSplittedTracks?
}
extension BanubaVideoEditorTrimSDK.TrimService {
  public func reloadComposition()
  public func getPartIndex(at time: CoreMedia.CMTime) -> Swift.Int?
  public func videoWasCropped() -> Swift.Bool
  public func videoWasReordered() -> Swift.Bool
  public var compositionDuration: CoreMedia.CMTime {
    get
  }
  public func traksInfoDuration() -> [CoreMedia.CMTimeRange]
  public func adjustCompositionDurationIfNeeded()
}
extension BanubaVideoEditorTrimSDK.TrimService {
  public func getExportRestrictions() -> BanubaVideoEditorTrimSDK.TrimServiceError?
  public func didChangeTrackInfoRotation(_ trackInfo: VideoEditor.VideoEditorAssetTrackInfo)
  public func getMinimumTrimDuration() -> CoreMedia.CMTime
  public func getMaximumTrimDuration(for trackInfo: VideoEditor.VideoEditorAssetTrackInfo) -> CoreMedia.CMTime
  public func getAspectRatio() -> BanubaUtilities.AspectRatio?
}
extension BanubaVideoEditorTrimSDK.TimeResult : Swift.Equatable {}
extension BanubaVideoEditorTrimSDK.TimeResult : Swift.Hashable {}
extension BanubaVideoEditorTrimSDK.TrimServiceError : Swift.Equatable {}
extension BanubaVideoEditorTrimSDK.TrimServiceError : Swift.Hashable {}
