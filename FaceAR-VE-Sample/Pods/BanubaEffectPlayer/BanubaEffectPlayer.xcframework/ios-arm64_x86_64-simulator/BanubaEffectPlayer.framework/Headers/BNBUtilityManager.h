// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from recognizer.djinni

#import "BNBHardwareClass.h"
#import "BNBLogRecordCallback.h"
#import "BNBSeverityLevel.h"
#import <Foundation/Foundation.h>


@interface BNBUtilityManager : NSObject

+ (void)initialize:(nonnull NSArray<NSString *> *)resourcePaths
       clientToken:(nonnull NSString *)clientToken;

+ (void)release;

/** Diagnostic crash. Use this to check you crash analytics systems. */
+ (void)diagnosticCrash;

/**
 * Get information about CPU capabilities. Mainly for usage on Android
 * @return JSON-string describing CPU capabilties
 */
+ (nonnull NSString *)cpuEnv;

/**
 * Check device SoC class.
 * On Android first call may require presence of OpenGL context to 
 * get info about GPU. 
 * @return hardware class of device
 */
+ (BNBHardwareClass)getHardwareClass;

+ (void)setLogLevel:(BNBSeverityLevel)level;

/**
 * Set callback to recieve log events from Banuba SDK.
 * @param cb Callback
 * @param lvl recieve logs with specified and higher levels
 */
+ (void)setLogRecordCallback:(nullable id<BNBLogRecordCallback>)cb
                         lvl:(BNBSeverityLevel)lvl;

/** Returns SDK version as string */
+ (nonnull NSString *)getBanubaSdkVersionString;

/**
 * Returns SDK version as number
 * major = version / 10000000
 * minor = (version - major * 10000000) / 100000
 * patch = (version - major * 10000000 - minor * 100000) / 1000
 * revision = version % 1000
 */
+ (int32_t)getBanubaSdkVersion;

/**
 * load GL functions, for dynamic libraries only
 * should be called with active GL context
 */
+ (void)loadGlFunctions;

@end
