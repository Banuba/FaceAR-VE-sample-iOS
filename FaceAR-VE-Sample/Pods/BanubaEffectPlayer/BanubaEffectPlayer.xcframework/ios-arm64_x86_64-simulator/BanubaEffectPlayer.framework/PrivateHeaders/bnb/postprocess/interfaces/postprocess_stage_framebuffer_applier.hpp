/// \file
/// \addtogroup Postprocess
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from postprocess.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>

namespace bnb { namespace interfaces {

class postprocess_stage;

/** Apply stage on current framebuffer (slower than applying on texture). */
class BNB_EXPORT postprocess_stage_framebuffer_applier {
public:
    virtual ~postprocess_stage_framebuffer_applier() {}

    /**
     * @param stage postprocess stage which you need to apply on current framebuffer.
     * @param params parameters for effect.
     * @param width width of the current framebuffer.
     * @param height height of the current framebuffer.
     */
    virtual void apply(const std::shared_ptr<postprocess_stage> & stage, const std::unordered_map<std::string, std::string> & params, int32_t width, int32_t height) = 0;

    static std::shared_ptr<postprocess_stage_framebuffer_applier> create();
};

} }  // namespace bnb::interfaces
/// @}

